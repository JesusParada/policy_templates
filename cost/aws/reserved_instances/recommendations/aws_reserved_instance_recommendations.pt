name "AWS Reserved Instances Recommendations"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when AWS RI Recommendations are identified. NOTE: These RI Purchase Recommendations are generated by AWS. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/reserved_instances/recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
default_frequency "daily"
info(
  version: "3.0",
  provider: "AWS",
  service: "EC2",
  policy_set: "Reserved Instances",
  recommendation_type: "Rate Reduction"
)

###############################################################################
# User Inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_days" do
  type "string"
  label "Look Back Period"
  category "RI"
  description "Number of days of prior usage to analyze."
  default "Last 7 Days"
  allowed_values "Last 7 Days", "Last 30 Days", "Last 60 Days"
end

parameter "param_service" do
  type "list"
  label "Service"
  category "RI"
  description "AWS Services for which to scan for RI Recommendations. Leave blank to scan all services."
  default []
  allowed_values ["ElastiCache", "Elastic Compute Cloud (EC2)", "Elasticsearch Service (ES)", "Redshift", "Relational Database Service (RDS)"]
end

parameter "param_service_spec" do
  type "string"
  label "EC2 Specification"
  category "RI"
  description "EC2 RI type. This parameter only matters for EC2 recommendations."
  default "Standard"
  allowed_values "Standard", "Convertible"
end

parameter "param_scope" do
  type "string"
  label "Account Scope"
  category "RI"
  description "The account scope that you want your recommendations for."
  default "Payer"
  allowed_values "Payer", "Linked"
end

parameter "param_term" do
  type "string"
  label "RI Term"
  category "RI"
  description "Length of RI term"
  default "Any"
  allowed_values "Any", "1 Year", "3 Year"
end

parameter "param_payment_option" do
  type "string"
  label "(Optional) Payment Option"
  category "RI"
  description "RI purchase option. Default setting of All includes all RI purchase options."
  default "All"
  allowed_values "All", "No Upfront", "Partial Upfront", "All Upfront", "Light Utilization", "Medium Utilization", "Heavy Utilization"
end

parameter "param_min_savings" do
  type "number"
  label "Net Savings Threshold"
  category "RI"
  description "Specify the minimum estimated monthly savings that should result in a recommendation"
  default 100
  min_value 0
end

parameter "param_currency_adjustment" do
  type "number"
  label "Currency Adjustment"
  description "Adjusts monetary values by the given percentage to assist with currency conversion. Default value of 100 will leave the values unmodified."
  default 100
  min_value 0
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws" do
  get_page_marker do
    body_path "NextPageToken"
  end
  set_page_marker do
    body_field "NextPageToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account_name"
  iterate $ds_get_caller_identity
  request do
    run_script $js_aws_account_name, val(iter_item, "account"), $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "id", val(iter_item, "account")
      field "name", jmes_path(col_item, "dimensions.vendor_account_name")
    end
  end
end

script "js_aws_account_name", type: "javascript" do
  parameters "account_id", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      "dimensions": ["vendor_account_name"],
      "granularity": "day",
      "start_at": start_date,
      "end_at": end_date,
      "metrics": ["cost_nonamortized_unblended_adj"],
      "billing_center_ids": ds_top_level_bcs,
      "limit": 1,
      "filter": {
        "dimension": "vendor_account",
        "type": "equal",
        "value": account_id
      }
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_aws_account_name
end

script "js_aws_account", type:"javascript" do
  parameters "ds_aws_account_name"
  result "result"
  code <<-EOS
  result = {
    name: ds_aws_account_name[0]['name'],
    id: ds_aws_account_name[0]['id']
  }

  if (result['name'] == null || result['name'] == undefined) {
    result['name'] = ""
  }
EOS
end

datasource "ds_ri_types" do
  run_script $js_ri_types, $param_service
end

script "js_ri_types", type: "javascript" do
  parameters "param_service"
  result "result"
  code <<-EOS
  if (param_service.length == 0) {
    services = [
      "ElastiCache",
      "Elastic Compute Cloud (EC2)",
      "Elasticsearch Service (ES)",
      "Redshift",
      "Relational Database Service (RDS)"
    ]
  } else {
    services = param_service
  }

  result = _.map(services, function(service) {
    return { service: service }
  })
EOS
end

datasource "ds_ri_recommendations" do
  iterate $ds_ri_types
  request do
    run_script $js_ri_recommendations, val(iter_item, 'service'), $param_days, $param_payment_option, $param_service_spec, $param_term, $param_scope
  end
  result do
    encoding "json"
    collect jmes_path(response, "Recommendations[*]") do
      field "accountScope", jmes_path(col_item, "AccountScope")
      field "lookbackPeriodInDays", jmes_path(col_item, "LookbackPeriodInDays")
      field "paymentOption", jmes_path(col_item, "PaymentOption")
      field "termInYears", jmes_path(col_item, "TermInYears")
      field "service", val(iter_item, "service")
      field "recommendationDetails" do
        collect jmes_path(col_item, "RecommendationDetails[*]") do
          field "accountID", jmes_path(col_item, "AccountId")
          field "averageNormalizedUnitsUsedPerHour", jmes_path(col_item, "AverageNormalizedUnitsUsedPerHour")
          field "averageNumberOfInstancesUsedPerHour", jmes_path(col_item, "AverageNumberOfInstancesUsedPerHour")
          field "averageUtilization", jmes_path(col_item, "AverageUtilization")
          field "estimatedBreakEvenInMonths", jmes_path(col_item, "EstimatedBreakEvenInMonths")
          field "estimatedMonthlyOnDemandCost", jmes_path(col_item, "EstimatedMonthlyOnDemandCost")
          field "estimatedMonthlySavingsAmount", jmes_path(col_item, "EstimatedMonthlySavingsAmount")
          field "estimatedMonthlySavingsPercentage", jmes_path(col_item, "EstimatedMonthlySavingsPercentage")
          field "estimatedReservationCostForLookbackPeriod", jmes_path(col_item, "EstimatedReservationCostForLookbackPeriod")
          field "availabilityZone", jmes_path(col_item, "InstanceDetails.*.AvailabilityZone")
          field "currentGeneration", jmes_path(col_item, "InstanceDetails.*.CurrentGeneration")
          field "family", jmes_path(col_item, "InstanceDetails.*.Family")
          field "instanceType", jmes_path(col_item, "InstanceDetails.*.InstanceType")
          field "platform", jmes_path(col_item, "InstanceDetails.*.Platform")
          field "region", jmes_path(col_item, "InstanceDetails.*.Region")
          field "sizeFlexEligible", jmes_path(col_item, "InstanceDetails.*.SizeFlexEligible")
          field "tenancy", jmes_path(col_item, "InstanceDetails.*.Tenancy")
          field "nodeType", jmes_path(col_item, "InstanceDetails.*.NodeType")
          field "productDescription", jmes_path(col_item, "InstanceDetails.*.ProductDescription")
          field "instanceClass", jmes_path(col_item, "InstanceDetails.*.InstanceClass")
          field "instanceSize", jmes_path(col_item, "InstanceDetails.*.InstanceSize")
          field "databaseEngine", jmes_path(col_item, "InstanceDetails.*.DatabaseEngine")
          field "databaseEdition", jmes_path(col_item, "InstanceDetails.*.DatabaseEdition")
          field "deploymentOption", jmes_path(col_item, "InstanceDetails.*.DeploymentOption")
          field "licenseModel", jmes_path(col_item, "InstanceDetails.*.LicenseModel")
          field "maximumNormalizedUnitsUsedPerHour", jmes_path(col_item, "MaximumNormalizedUnitsUsedPerHour")
          field "maximumNumberOfInstancesUsedPerHour", jmes_path(col_item, "MaximumNumberOfInstancesUsedPerHour")
          field "minimumNormalizedUnitsUsedPerHour", jmes_path(col_item, "MinimumNormalizedUnitsUsedPerHour")
          field "minimumNumberOfInstancesUsedPerHour", jmes_path(col_item, "MinimumNumberOfInstancesUsedPerHour")
          field "recommendedNormalizedUnitsToPurchase", jmes_path(col_item, "RecommendedNormalizedUnitsToPurchase")
          field "recommendedNumberOfInstancesToPurchase", jmes_path(col_item, "RecommendedNumberOfInstancesToPurchase")
          field "recurringStandardMonthlyCost", jmes_path(col_item, "RecurringStandardMonthlyCost")
          field "upfrontCost", jmes_path(col_item, "UpfrontCost")
        end
      end
    end
  end
end

script "js_ri_recommendations", type: "javascript" do
  parameters "service", "param_days", "param_payment_option", "param_service_spec", "param_term", "param_scope"
  result "request"
  code <<-EOS
  // Tables to convert human-readable parameter values to their API equivalents
  period_table = {
    "Last 7 Days": "SEVEN_DAYS",
    "Last 30 Days": "THIRTY_DAYS",
    "Last 60 Days": "SIXTY_DAYS"
  }

  service_table = {
    "Elastic Compute Cloud (EC2)": "Amazon Elastic Compute Cloud - Compute",
    "Relational Database Service (RDS)": "Amazon Relational Database Service",
    "ElastiCache": "Amazon ElastiCache",
    "Redshift": "Amazon Redshift",
    "Elasticsearch Service (ES)": "Amazon Elasticsearch Service"
  }

  term_table = {
    "1 Year": "ONE_YEAR",
    "3 Year": "THREE_YEARS"
  }

  // Build out the body of the request based on parameters
  body_fields = {
    LookbackPeriodInDays: period_table[param_days],
    AccountScope: param_scope.toUpperCase(),
    Service: service_table[service]
  }

  if (param_payment_option != "All") {
    body_fields['PaymentOption'] = param_payment_option.replace(' ', '_').toUpperCase()
  }

  if (service == "Elastic Compute Cloud (EC2)") {
    body_fields['ServiceSpecification'] = {
      EC2Specification: { OfferingClass: param_service_spec.toUpperCase() }
    }
  }

  if (param_term != "Any") {
    body_fields['TermInYears'] = term_table[param_term]
  }

  var request = {
    auth: "auth_aws",
    pagination: "pagination_aws",
    host: "ce.us-east-1.amazonaws.com",
    path: "/",
    verb: "POST",
    body_fields: body_fields,
    headers: {
      "User-Agent": "RS Policies",
      "X-Amz-Target": "AWSInsightsIndexService.GetReservationPurchaseRecommendation",
      "Content-Type": "application/x-amz-json-1.1",
    }
  }
EOS
end

datasource "ds_ri_normalization" do
  run_script $js_ri_cleanup, $ds_ri_recommendations, $param_currency_adjustment, $ds_aws_account
end

script "js_ri_normalization", type: "javascript" do
  parameters "ds_ri_recommendations", "param_currency_adjustment", "ds_aws_account"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_ri_recommendations, function(item) {
    term = item["termInYears"].toString() + " year"
    if (item["termInYears"] > 1) { term += "s" }

    _.each(item["recommendationDetails"], function(recommendation) {
      result.push({
        accountID: item["accountID"],
        accountName: ds_aws_account['name'],
        service: item["service"],
        accountScope: item["accountScope"],
        lookbackPeriodInDays: item["lookbackPeriodInDays"],
        paymentOption: item["paymentOption"],
        availabilityZone: recommendation["availabilityZone"].toString(),
        averageNormalizedUnitsUsedPerHour: (Math.round(recommendation["averageNormalizedUnitsUsedPerHour"] * 100) / 100).toString(10),
        averageNumberOfInstancesUsedPerHour: (Math.round(recommendation["averageNumberOfInstancesUsedPerHour"] * 100) / 100).toString(10),
        averageUtilization: (Math.round(recommendation["averageUtilization"] * 100) / 100).toString(10),
        databaseEdition: recommendation["databaseEdition"].toString(),
        databaseEngine: recommendation["databaseEngine"].toString(),
        deploymentOption: recommendation["deploymentOption"].toString(),
        estimatedBreakEvenInMonths: (Math.round(recommendation["estimatedBreakEvenInMonths"] * 100) / 100).toString(10),
        estimatedMonthlyOnDemandCost: (Math.round(recommendation["estimatedMonthlyOnDemandCost"] * 100) / 100).toString(10),
        estimatedMonthlySavingsAmount: (Math.round(recommendation["estimatedMonthlySavingsAmount"] * 100) / 100 * currency_adjustment).toString(10),
        estimatedMonthlySavingsPercentage: (Math.round(recommendation["estimatedMonthlySavingsPercentage"] * 100) / 100).toString(10),
        estimatedReservationCostForLookbackPeriod: (Math.round(recommendation["estimatedReservationCostForLookbackPeriod"] * 100) / 100).toString(10),
        family: recommendation["family"].toString(),
        instanceClass: recommendation["instanceClass"].toString(),
        instanceSize: recommendation["instanceSize"].toString(),
        instanceType: recommendation["instanceType"].toString(),
        licenseModel: recommendation["licenseModel"].toString(),
        maximumNormalizedUnitsUsedPerHour: (Math.round(recommendation["maximumNormalizedUnitsUsedPerHour"] * 100) / 100).toString(10),
        maximumNumberOfInstancesUsedPerHour: (Math.round(recommendation["maximumNumberOfInstancesUsedPerHour"] * 100) / 100).toString(10),
        minimumNormalizedUnitsUsedPerHour: (Math.round(recommendation["minimumNormalizedUnitsUsedPerHour"] * 100) / 100).toString(10),
        minimumNumberOfInstancesUsedPerHour: (Math.round(recommendation["minimumNumberOfInstancesUsedPerHour"] * 100) / 100).toString(10),
        nodeType: recommendation["nodeType"].toString(),
        platform: recommendation["platform"].toString() || recommendation["databaseEngine"].toString(),
        productDescription: recommendation["productDescription"].toString(),
        recommendedNormalizedUnitsToPurchase: recommendation["recommendedNormalizedUnitsToPurchase"].toString(),
        recommendedNumberOfInstancesToPurchase: recommendation["recommendedNumberOfInstancesToPurchase"].toString(),
        recurringStandardMonthlyCost: (Math.round(recommendation["recurringStandardMonthlyCost"] * 100) / 100).toString(10),
        region: recommendation["region"].toString(),
        sizeFlexEligible: recommendation["sizeFlexEligible"].toString(),
        tenancy: recommendation["tenancy"].toString(),
        upfrontCost: (Math.round(recommendation["upfrontCost"] * 100) / 100).toString(10),
        resourceType: recommendation["instanceType"].toString() || recommendation["instanceSize"].toString() || recommendation["nodeType"].toString(),
        term: term
      })
    })
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_aws_ri_recommendations" do
  validate_each $ds_ri_normalization do
    summary_template "{{ len data }} AWS Reserved Instances Purchase Recommendations"
    check lt(to_n(val(item,"estimatedMonthlySavingsAmount")), $param_min_savings)
    escalate $esc_email
    hash_include "estimatedMonthlySavingsAmount"
    export do
      resource_level false
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "region" do
        label "Region"
      end
      field "service" do
        label "Service"
      end
      field "savings" do
        label "Estimated Monthly Savings Amount"
        path "estimatedMonthlySavingsAmount"
      end
      field "scope" do
        label "Account Scope"
        path "accountScope"
      end
      field "averageNormalizedUnitsUsedPerHour" do
        label "Average Normalized Units Used Per Hour"
      end
      field "averageNumberOfInstancesUsedPerHour" do
        label "Average Number Of Instances Used Per Hour"
      end
      field "averageUtilization" do
        label "Average Utilization"
      end
      field "databaseEdition" do
        label "Database Edition"
      end
      field "databaseEngine" do
        label "Database Engine"
      end
      field "deploymentOption" do
        label "Deployment Option"
      end
      field "estimatedBreakEvenInMonths" do
        label "Estimated Break Even In Months"
      end
      field "estimatedMonthlyOnDemandCost" do
        label "Estimated Monthly On Demand Cost"
      end
      field "estimatedMonthlySavingsPercentage" do
        label "Estimated Monthly Savings Percentage"
      end
      field "estimatedReservationCostForLookbackPeriod" do
        label "Estimated Reservation Cost For Lookback Period"
      end
      field "family" do
        label "Family"
      end
      field "instanceClass" do
        label "Instance Class"
      end
      field "instanceSize" do
        label "Instance Size"
      end
      field "instanceType" do
        label "Instance Type"
      end
      field "licenseModel" do
        label "License Model"
      end
      field "lookbackPeriod" do
        label "Look Back Period In Days"
        path "lookbackPeriodInDays"
      end
      field "maximumNormalizedUnitsUsedPerHour" do
        label "Maximum Normalized Units Used Per Hour"
      end
      field "maximumNumberOfInstancesUsedPerHour" do
        label "Maximum Number Of Instances Used Per Hour"
      end
      field "minimumNormalizedUnitsUsedPerHour" do
        label "Minimum Normalized Units Used Per Hour"
      end
      field "minimumNumberOfInstancesUsedPerHour" do
        label "Minimum Number Of Instances Used Per Hour"
      end
      field "nodeType" do
        label "Node Type"
      end
      field "paymentOption" do
        label "Payment Option"
      end
      field "platform" do
        label "Platform"
      end
      field "productDescription" do
        label "Product Description"
      end
      field "recommendedNormalizedUnitsToPurchase" do
        label "Recommended Normalized Units To Purchase"
      end
      field "recommendedQuantity" do
        label "Recommended Number Of Instances To Purchase"
        path "recommendedNumberOfInstancesToPurchase"
      end
      field "recurringStandardMonthlyCost" do
        label "Recurring Standard Monthly Cost"
      end
      field "sizeFlexEligible" do
        label "Flex Eligible"
      end
      field "tenancy" do
        label "Tenancy"
      end
      field "upfrontCost" do
        label "Upfront Cost"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "term" do
        label "Term"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end
