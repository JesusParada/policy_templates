name "AWS Savings Plan Recommendations"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when AWS Savings Plan Recommendations are identified. NOTE: These  Recommendations are generated by AWS. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/savings_plan/recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
default_frequency "daily"
info(
  version: "3.0",
  provider: "AWS",
  service: "",
  policy_set: "Savings Plans",
  recommendation_type: "Rate Reduction"
)

##############################################################################
# Parameters
##############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  category "Policy Settings"
  description "Email addresses of the recipients you wish to notify when new incidents are created."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  category "Policy Settings"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_days" do
  type "string"
  label "Look Back Period"
  category "Filters"
  description "Number of days of prior usage to analyze."
  default "Last 7 Days"
  allowed_values "Last 7 Days", "Last 30 Days", "Last 60 Days"
end

parameter "param_term" do
  type "string"
  label "Savings Plan Term"
  category "Filters"
  description "Length of RI term"
  default "1 Year"
  allowed_values "1 Year", "3 Year"
end

parameter "param_payment_option" do
  type "string"
  label "Payment Option"
  category "Filters"
  description "RI purchase option."
  default "No Upfront"
  allowed_values "No Upfront", "Partial Upfront", "All Upfront", "Light Utilization", "Medium Utilization", "Heavy Utilization"
end

parameter "param_scope" do
  type "string"
  label "Account Scope"
  category "Filters"
  description "The account scope that you want your recommendations for."
  default "Payer"
  allowed_values "Payer", "Linked"
end

parameter "param_savings_plan_type" do
  type "string"
  label "Savings Plan Type"
  category "Filters"
  default "Compute Savings Plan"
  allowed_values "Compute Savings Plan", "EC2 Instance Savings Plan", "SageMaker Savings Plans"
end

parameter "param_min_savings" do
  type "number"
  label "Minimum Savings Threshold"
  category "Filters"
  description "Specify the minimum estimated monthly savings that should result in a recommendation"
  default 100
  min_value 0
end

parameter "param_currency_adjustment" do
  type "number"
  label "Currency Adjustment"
  category "Currency"
  description "Percentage to multiple monetary values by for currency conversion. Default value of 100 will leave the values unmodified."
  default 100
  min_value 0
end

parameter "param_currency_code" do
  type "string"
  label "Currency Code"
  category "Filters"
  description "Currency code for currency you are converting to. Leave blank if not doing any conversion. Example: USD"
  default ""
  allowed_pattern /^([A-Z]{3})?$/
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws" do
  get_page_marker do
    body_path "NextPageToken"
  end
  set_page_marker do
    body_field "NextPageToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-au.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-au.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_sp_recommendations" do
  request do
    run_script $js_sp_recommendations, $param_days, $param_payment_option, $param_term, $param_savings_plan_type, $param_scope
  end
  result do
    encoding "json"
    collect jmes_path(response, "SavingsPlansPurchaseRecommendation.SavingsPlansPurchaseRecommendationDetails[*]") do
      field "accountID", jmes_path(col_item, "AccountId")
      field "currencyCode", jmes_path(col_item, "CurrencyCode")
      field "currentAverageHourlyOnDemandSpend", jmes_path(col_item, "CurrentAverageHourlyOnDemandSpend")
      field "currentMaximumHourlyOnDemandSpend", jmes_path(col_item, "CurrentMaximumHourlyOnDemandSpend")
      field "currentMinimumHourlyOnDemandSpend", jmes_path(col_item, "CurrentMinimumHourlyOnDemandSpend")
      field "estimatedAverageUtilization", jmes_path(col_item, "EstimatedAverageUtilization")
      field "estimatedMonthlySavingsAmount", jmes_path(col_item, "EstimatedMonthlySavingsAmount")
      field "estimatedOnDemandCost", jmes_path(col_item, "EstimatedOnDemandCost")
      field "estimatedROI", jmes_path(col_item, "EstimatedROI")
      field "estimatedSavingsAmount", jmes_path(col_item, "EstimatedSavingsAmount")
      field "estimatedSavingsPercentage", jmes_path(col_item, "EstimatedSavingsPercentage")
      field "estimatedSavingsPlanCost", jmes_path(col_item, "EstimatedSPCost")
      field "hourlyCommitmentToPurchase", jmes_path(col_item, "HourlyCommitmentToPurchase")
      field "instanceFamily", jmes_path(col_item, "SavingsPlansDetails.InstanceFamily")
      field "offeringId", jmes_path(col_item, "SavingsPlansDetails.OfferingId")
      field "region", jmes_path(col_item, "SavingsPlansDetails.Region")
      field "upfrontCost", jmes_path(col_item, "UpfrontCost")
    end
  end
end

script "js_sp_recommendations", type: "javascript" do
  parameters "param_days", "param_payment_option", "param_term", "param_savings_plan_type", "param_scope"
  result "request"
  code <<-EOS
  // Tables to convert human-readable parameter values to their API equivalents
  period_table = {
    "Last 7 Days": "SEVEN_DAYS",
    "Last 30 Days": "THIRTY_DAYS",
    "Last 60 Days": "SIXTY_DAYS"
  }

  term_table = {
    "1 Year": "ONE_YEAR",
    "3 Year": "THREE_YEARS"
  }

  plan_table = {
    "Compute Savings Plan": "COMPUTE_SP",
    "EC2 Instance Savings Plan": "EC2_INSTANCE_SP",
    "SageMaker Savings Plans": "SAGEMAKER_SP"
  }

  // Build out the body of the request based on parameters
  body_fields = {
    AccountScope: param_scope.toUpperCase(),
    LookbackPeriodInDays: period_table[param_days],
    PaymentOption: param_payment_option.replace(' ', '_').toUpperCase()
    SavingsPlansType: plan[param_savings_plan_type],
    TermInYears: term_table[param_term]
  }

  var request = {
    auth: "auth_aws",
    pagination: "pagination_aws",
    host: "ce.us-east-1.amazonaws.com",
    path: "/",
    verb: "POST",
    body_fields: body_fields,
    headers: {
      "User-Agent": "RS Policies",
      "X-Amz-Target": "AWSInsightsIndexService.GetSavingsPlansPurchaseRecommendation",
      "Content-Type": "application/x-amz-json-1.1",
    }
  }
EOS
end

datasource "ds_sp_normalization" do
  run_script $js_sp_normalization, $ds_sp_recommendations, $ds_aws_account, $ds_currency_reference, $param_currency_adjustment, $param_currency_code, $param_term, $param_payment_option, $param_savings_plan_type, $param_days
end

script "js_sp_normalization", type: "javascript" do
  parameters "ds_sp_recommendations", "ds_aws_account", "ds_currency_reference", "param_currency_adjustment", "param_currency_code", "param_term", "param_payment_option", "param_savings_plan_type", "param_days"
  result "result"
  code <<-EOS
  // Used for formatting numbers to look pretty
  function formatNumber(number, separator){
    numString = number.toString()
    values = numString.split(".")
    formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  result = []
  total_savings = 0.0

  _.each(ds_sp_recommendations, function(reco) {
    var resourceType = reco["instanceFamily"]

    if (resourceType == "" || resourceType == null) {
      resourceType = param_savings_plan_type
    }

    currentAverageHourlyOnDemandSpend = Math.round(reco["currentAverageHourlyOnDemandSpend"] * param_currency_adjustment) / 100
    currentMaximumHourlyOnDemandSpend = Math.round(reco["currentMaximumHourlyOnDemandSpend"] * param_currency_adjustment) / 100
    currentMinimumHourlyOnDemandSpend = Math.round(reco["currentMinimumHourlyOnDemandSpend"] * param_currency_adjustment) / 100
    estimatedAverageUtilization = Math.round(reco["estimatedAverageUtilization"] * 100) / 100
    estimatedMonthlySavingsAmount = Math.round(reco["estimatedMonthlySavingsAmount"] * param_currency_adjustment) / 100
    estimatedOnDemandCost = Math.round(reco["estimatedOnDemandCost"] * param_currency_adjustment) / 100
    estimatedROI = Math.round(reco["estimatedROI"] * 100) / 100
    estimatedSavingsAmount = Math.round(reco["estimatedSavingsAmount"] * param_currency_adjustment) / 100
    estimatedSavingsPercentage = Math.round(reco["estimatedSavingsPercentage"] * 100) / 100
    estimatedSavingsPlanCost = Math.round(reco["estimatedSavingsPlanCost"] * param_currency_adjustment) / 100
    hourlyCommitmentToPurchase = Math.round(reco["hourlyCommitmentToPurchase"] * 100) / 100
    upfrontCost = Math.round(reco["upfrontCost"] * 100) / 100

    currencyCode = reco["currencyCode"]
    if (param_currency_code != "") { currencyCode = param_currency_code }

    savingsCurrency = ds_currency_reference[currencyCode]['symbol']

    result.push({
      accountID: reco["accountID"],
      accountName: ds_aws_account['name'],
      currencyCode: currencyCode,
      savingsCurrency: savingsCurrency,
      currentAverageHourlyOnDemandSpend: currentAverageHourlyOnDemandSpend,
      currentMaximumHourlyOnDemandSpend: currentMaximumHourlyOnDemandSpend,
      currentMinimumHourlyOnDemandSpend: currentMinimumHourlyOnDemandSpend,
      estimatedAverageUtilization: estimatedAverageUtilization,
      estimatedMonthlySavingsAmount: estimatedMonthlySavingsAmount,
      estimatedOnDemandCost: estimatedOnDemandCost,
      estimatedROI: estimatedROI,
      estimatedSavingsAmount: estimatedSavingsAmount,
      estimatedSavingsPercentage: estimatedSavingsPercentage,
      estimatedSavingsPlanCost: estimatedSavingsPlanCost,
      hourlyCommitmentToPurchase: hourlyCommitmentToPurchase,
      instanceFamily: reco["instanceFamily"],
      offeringId: reco["offeringId"],
      region: reco["region"],
      upfrontCost: upfrontCost,
      term: param_term,
      paymentOption: param_payment_option,
      resourceType: resourceType,
      lookbackPeriod: param_days
    })
  })
EOS
end

###############################################################################
# Policy
##############################################################################

policy "aws_sp_recommendations" do
  validate_each $ds_sp_normalization do
    summary_template "AWS Savings Plan Purchase Recommendations"
    escalate $esc_email
    check lt(to_n(val(item,"estimatedMonthlySavingsAmount")), $param_min_savings)
    hash_include 'estimatedMonthlySavingsAmount'
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "region" do
        label "Region"
      end
      field "estimatedMonthlySavingsAmount" do
        label "Estimated Monthly Savings"
      end
      field "estimatedSavingsPercentage" do
        label "Estimated Savings Percentage"
      end
      field "estimatedSavingsPlanCost" do
        label "Estimated Savings Plan Cost"
      end
      field "recommendedQuantity" do
        label "Quantity to Purchase"
        path "hourlyCommitmentToPurchase"
      end
      field "upfrontCost" do
        label "Upfront Cost"
      end
      field "instanceFamily" do
        label "Instance Family"
      end
      field "currentAverageHourlyOnDemandSpend" do
        label "Current Avg Hourly OnDemand Spend"
      end
      field "currentMaximumHourlyOnDemandSpend" do
        label "Current Max Hourly OnDemand Spend"
      end
      field "currentMinimumHourlyOnDemandSpend" do
        label "Current Min Hourly OnDemand Spend"
      end
      field "offeringId" do
        label "Offering Id"
      end
      field "id" do
        label "Account Id"
        path "accountID"
      end
      field "savings" do
        label "Estimated Savings"
        path "estimatedMonthlySavingsAmount"
      end
      field "term" do
        label "Term"
      end
      field "paymentOption" do
        label "Purchasing Option"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "lookbackPeriod" do
        label "Lookback Period"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end
