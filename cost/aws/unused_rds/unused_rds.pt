name "AWS Unused RDS Instance - MOCK"
rs_pt_ver 20180301
type "policy"
short_description "A mock policy that: Checks for database services that have no connections and delete them after approval. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/unused_rds) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "0.1",
  provider: "AWS",
  service: "RDS",
  policy_set: "Unused Database Services"
  )

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Instances"]
end

###############################################################################
# Authentication
###############################################################################


###############################################################################
# Datasources
###############################################################################

# get all the RDS instances merged together with the tags and CloudWatch
datasource "ds_instance_cost_mapping" do
  run_script $js_instance_cost_mapping
end

###############################################################################
# Scripts
###############################################################################

# merge the instances and tags and remove instances that have the exclusion tag
script "js_instance_cost_mapping", type: "javascript" do
  result "result"
  code <<-EOS
  var instance_list = []
  var tags = []
  var emptyTags = []
  tags.push("purpose=to show up as an idle DB")
  tags.push("mock=true")
  var result = {}

  instance_list.push({
    accountID: "279901730306",
    region: "us-east-1",
    name: "dummy-database-to-be-idle-1",
    arn: "arn:aws:rds:us-east-1:279901730306:db:dummy-database-to-be-idle-1",
    resourceID: "db-Y9A7GZ27TRG2I9OC81ZRNGAE9UV",
    resourceType: "db.t2.micro",
    privateDnsName: "dummy-database-to-be-idle-1.c12zeech0klz.us-east-1.rds.amazonaws.com",
    status: "available",
    connections: 17423,
    tags: emptyTags,
    savings: 4.91,
    status: "RDS",
    savings_currency: "£"
  })

  instance_list.push({
    accountID: "279901730306",
    region: "us-west-2",
    name: "dummy-database-to-be-idle-2",
    arn: "arn:aws:rds:us-west-2:279901730306:db:dummy-database-to-be-idle-2",
    resourceID: "db-KS7GZN7TSL2ILOW81ZRNGAEV3I",
    resourceType: "db.t2.medium",
    privateDnsName: "dummy-database-to-be-idle-2.c12zeech0klz.us-west-2.rds.amazonaws.com",
    status: "available",
    connections: 57821,
    tags: tags,
    savings: 571.37,
    status: "RDS",
    savings_currency: "£"
  })

  result={
    "instance_list": instance_list,
    "message": "The total estimated monthly savings are £576.28",
    "accountID": "279901730306"
  }

  result.instance_list = _.sortBy(result.instance_list,"region");
  result.instance_list = _.sortBy(result.instance_list,"id");
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_unused_rds" do
  validate $ds_instance_cost_mapping do
    summary_template "AWS Account ID: {{ data.accountID }} - {{ len data.instance_list }} rows containing AWS RDS Unused Instances"
    detail_template <<-EOS
{{data.message}}
EOS
    escalate $email
    escalate $decommission_rds
    check eq(size(val(data,"instance_list")),0)
    export "instance_list" do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "region" do
        label "Region"
      end
      field "name" do
        label "Name"
      end
      field "status" do
        label "Status"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savings_currency" do
        label "Savings Currency"
      end
      field "resourceID" do
        label "Resource Id"
      end
      field "privateDnsName" do
        label "Private DNS Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "connections" do
        label "Connections"
      end
      field "arn" do
        label "ARN"
      end
      field "tags" do
        label "Tags"
      end
      field "id" do
        label "id"
        path "resourceID"
      end
      field "service" do
        label "Service"
      end
    end
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "decommission_rds" do
  automatic contains($param_automatic_action, "Delete Instances")
  label "Delete RDS Instance"
  description "Delete selected RDS Instances"
  run "decommission_rds", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define decommission_rds($data) return $all_responses do
  $$debug=true
  $$log = []
  $all_responses = []

  $syslog_subject = "AWS Unused RDS Instance: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  foreach $item in $data do
    $response = http_request(
      auth: $$auth_aws,
      https: true,
      verb: "get",
      host: "rds."+$item["region"]+".amazonaws.com",
      href: "/",
      query_strings: {
        "Action": "DeleteDBInstance",
        "Version": "2014-09-01",
        "DBInstanceIdentifier": $item["name"],
        "SkipFinalSnapshot":"true"
      }
    )
    $all_responses << $response
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  if $status_code == 404
    $_error_behavior = "skip"
  else
    $_error_behavior = "raise"
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end
