name "Azure Hybrid Use Benefit for Windows Server"
rs_pt_ver 20180301
type "policy"
short_description "Identifies instances eligible for Azure Hybrid Use Benefit.  See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/hybrid_use_benefit) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "3.0",
  provider: "Azure",
  service: "Compute",
  policy_set: ""
)

#############
# Parameters
#############

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "An Azure-native instance tag to ignore instances that are not using AHUB. Only supply the tag key. The policy assumes that the tag value is irrelevant."
  type "string"
  default "exclude_ahub"
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscription_allowed_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Hybrid use benefit"]
end

#################
# Authentication
#################

credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

#############
# Pagination
#############

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

##############
# Datasources
##############


datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "subscriptionName", jmes_path(col_item,"displayName")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_allowed_list
end

datasource "ds_azure_instances" do
  iterate $ds_filtered_subscriptions
    request do
      auth $azure_auth
      pagination $azure_pagination
      host $param_azure_endpoint
      path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.Compute/virtualMachines"])
      query "api-version","2017-12-01"
      header "User-Agent", "RS Policies"
      # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
      ignore_status [400,403,404]
    end
    result do
      encoding "json"
      collect jmes_path(response, "value") do
        field "subscriptionName", val(iter_item,"subscriptionName")
        field "id", jmes_path(col_item,"id")
        field "name", jmes_path(col_item,"name")
        field "location", jmes_path(col_item,"location")
        field "licenseType", jmes_path(col_item,"properties.licenseType")
        field "vmSize", jmes_path(col_item,"properties.hardwareProfile.vmSize")
        field "osType", jmes_path(col_item,"properties.storageProfile.osDisk.osType")
        field "imagePublisher", jmes_path(col_item,"properties.storageProfile.imageReference.publisher")
        field "imageOffer", jmes_path(col_item,"properties.storageProfile.imageReference.offer")
        field "imageSku", jmes_path(col_item,"properties.storageProfile.imageReference.sku")
        field "imageVersion", jmes_path(col_item,"properties.storageProfile.imageReference.version")
        field "tags", jmes_path(col_item,"tags")
      end
    end
end

# Gather local currency info
datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency_target" do
  run_script $js_currency_target, $ds_currency_reference, $ds_currency_code
end


datasource "ds_azure_pricing" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/azure/azure_vm_pricing.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "filtered_resources" do
  run_script $js_filter_resources, $ds_azure_instances, $param_exclusion_tag_key, $ds_azure_pricing, $ds_currency
end

##########
# Scripts
##########

script "js_currency_target", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  // Default to USD if currency is not found
  result = ds_currency_reference['USD']

  if (ds_currency_code['value'] != undefined && ds_currency_reference[ds_currency_code['value']] != undefined) {
    result = ds_currency_reference[ds_currency_code['value']]
  }
EOS
end

datasource "ds_currency_conversion" do
  request do
    host "api.xe-auth.flexeraeng.com"
    path "/prod/{proxy+}"
    query "from", "USD"
    query "to", val($ds_currency_target, 'code')
    query "amount", "1"
  end
  result do
    encoding "json"
    field "from", jmes_path(response, "from")
    field "to", jmes_path(response, "to")
    field "amount", jmes_path(response, "amount")
    field "year", jmes_path(response, "year")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_target, $ds_currency_conversion
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_target", "ds_currency_conversion"
  result "result"
  code <<-EOS
  result = ds_currency_target
  result['exchange_rate'] = 1

  currency_code = ds_currency_target['code']
  current_month = parseInt(new Date().toISOString().split('-')[1])

  conversion_block = _.find(ds_currency_conversion['to'][currency_code], function(item) {
    return item['month'] == current_month
  })

  if (conversion_block != undefined) {
    result['exchange_rate'] = conversion_block['monthlyAverage']
  }
EOS
end

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_allowed_list"
  result "results"
  code <<-EOS
  var results = []
  if ( param_subscription_allowed_list.length != 0){
    results = []
    _.each(param_subscription_allowed_list, function(sub){
      var found = _.find(ds_subscriptions, function(item){
        return item.subscriptionId == sub || item.subscriptionName.toLowerCase() == sub.toLowerCase();
      })
      results.push(found)
    })
  } else {
    results = ds_subscriptions
  }
EOS
end

script "js_filter_resources", type: "javascript" do
  parameters "ds_azure_instances","param_exclusion_tag_key", "ds_azure_pricing", "ds_currency"
  result "result"
  code <<-EOS
    var result = [];
    var region_table = {
      "ukwest": "UK West",
      "usgovvirginia": "US Gov Virginia",
      "eastus2": "US East 2",
      "uaenorth": "AE North",
      "southafricawest": "ZA West",
      "francesouth": "FR South",
      "westcentralus": "US West Central",
      "koreacentral": "KR Central",
      "westeurope": "EU West",
      "southafricanorth": "ZA North",
      "southeastasia": "AP Southeast",
      "centralindia": "IN Central",
      "switzerlandwest": "CH West",
      "norwayeast": "NO East",
      "germanywestcentral": "DE West Central",
      "westus2": "US West 2",
      "australiacentral": "AU Central",
      "italynorth": "IT North",
      "centralus": "US Central",
      "germanynorth": "DE North",
      "brazilsoutheast": "BR Southeast",
      "southindia": "IN South",
      "swedencentral": "SE Central",
      "francecentral": "FR Central",
      "australiasoutheast": "AU Southeast",
      "northeurope": "EU North",
      "koreasouth": "KR South",
      "usgovtexas": "US Gov TX",
      "polandcentral": "PL Central",
      "japaneast": "JA East",
      "westindia": "IN West",
      "japanwest": "JA West",
      "westus": "US West",
      "jioindiawest": "IN West Jio",
      "northcentralus": "US North Central",
      "southcentralus": "US South Central",
      "eastasia": "AP East",
      "jioindiacentral": "IN Central Jio",
      "australiacentral2": "AU Central 2",
      "canadaeast": "CA East",
      "eastus": "US East",
      "uaecentral": "AE Central",
      "norwaywest": "NO West",
      "canadacentral": "CA Central",
      "uksouth": "UK South",
      "qatarcentral": "QA Central",
      "swedensouth": "SE South",
      "brazilsouth": "BR South",
      "australiaeast": "AU East",
      "switzerlandnorth": "CH North",
      "usgovarizona": "US Gov AZ",
      "westus3": "US West 3"
    };

    // Function for formatting currency numbers later
    function formatNumber(number, separator) {
      var numString = number.toString()
      var values = numString.split(".")
      var formatted_number = ''

      while (values[0].length > 3) {
        var chunk = values[0].substr(-3)
        values[0] = values[0].substr(0, values[0].length - 3)
        formatted_number = separator + chunk + formatted_number
      }

      if (values[0].length > 0) { formatted_number = values[0] + formatted_number }

      if (values[1] == undefined) { return formatted_number }

      return formatted_number + "." + values[1]
    }

    result = []

    function getPriceInfo(location, vmSize, osType, pricingData) {
      if (!pricingData[location] || !pricingData[location][vmSize] || !pricingData[location][vmSize][osType]) {
        return null;
      }

      var pricePerUnit = pricingData[location][vmSize][osType].pricePerUnit
      var pricePerUnitAHUB =  pricingData[location][vmSize][osType].pricePerUnitAHUB

      if (pricePerUnit && pricePerUnitAHUB) {
        return pricePerUnit - pricePerUnitAHUB;
      } else {
        return null;
      }
    }

    _.each(ds_azure_instances, function(value) {
      var regionMapping = region_table[value.location];
      var priceDifference = getPriceInfo(regionMapping, value.vmSize, value.osType, ds_azure_pricing);
        if (value.osType == "Windows" && priceDifference != null && value.licenseType == null){
          monthlySavings = ((priceDifference * 24) * (365.25 / 12) * ds_currency['exchange_rate'])
          result.push({
            subscriptionName: value["subscriptionName"],
            id: value["id"],
            name: value["name"],
            location: value["location"],
            ahub: "No",
            vmSize: value["vmSize"],
            imagePublisher: value["imagePublisher"],
            imageOffer: value["imageOffer"],
            imageSku: value["imageSku"],
            imageVersion: value["imageVersion"],
            savingsCurrency: ds_currency['symbol'],
            savings: parseFloat(monthlySavings.toFixed(3))
          })
        }
    })

    result = _.sortBy(result, 'subscriptionName');
    result = _.sortBy(result, 'location');
  EOS
end

##########
# Policy
##########

policy 'azure_license_policy' do
  validate_each $filtered_resources do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Instances Not Using Azure Hybrid Use Benefit for Windows Server"
    escalate $email
    escalate $license_instances
    check eq(val(item,"ahub"),"Yes")
    export do
      resource_level true
      field "subscriptionName" do
        label "Subscription ID"
      end
      field "location" do
        label "Region"
      end
      field "id" do
        label "Resource Group"
      end
      field "name" do
        label "Subscription Name"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "vmSize" do
        label "Instance Size"
      end
      field "imagePublisher" do
        label "Image Publisher"
      end
      field "imageOffer" do
        label "Image Offer"
      end
      field "imageSku" do
        label "Image Sku"
      end
      field "imageVersion" do
        label "Image Version"
      end
    end
  end
end

##############
# Escalations
##############

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "license_instances" do
  automatic contains($param_automatic_action, "Hybrid use benefit")
  label "Add Hybrid Use Benefit"
  description "Apply hybrid use benefit to the selected intance"
  run "license_instances", data
end

##################
# Cloud Workflow
##################

define license_instances($data) return $all_responses do

  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      $update_inst_response = http_request(
        auth: $$azure_auth,
        verb: "patch",
        host: "management.azure.com",
        https: true,
        href: $item["id"],
        query_strings: {
          "api-version": "2018-06-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        },
        body: {
          "properties": {
          "licenseType": "Windows_Server"
          }
        }
      )

      $all_responses << $update_inst_response

    end
  end
end
