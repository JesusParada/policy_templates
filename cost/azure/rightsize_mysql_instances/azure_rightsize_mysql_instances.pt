name "Azure Rightsize MySQL Databases"
rs_pt_ver 20180301
type "policy"
short_description "Check for Inefficient Azure MySQL database services that are inside or outside the CPU threshold for the last 30 days and resizes them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/rightsize_mysql_instances/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "1.0",
  provider: "Azure",
  service: "DBforMySQL",
  policy_set: "RightSize Database Services",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_cpu_upsize" do
  type "number"
  label "CPU % - Upsize threshold"
  description "Set to -1 to ignore CPU utilization"
  default 80
  min_value -1
  max_value 100
end

parameter "param_cpu_downsize" do
  type "number"
  label "CPU % - Downsize Threshold"
  description "Set to -1 to ignore CPU utilization"
  default 60
  min_value -1
  max_value 100
end

parameter "param_threshold_statistic" do
  type "string"
  label "Threshold Statistic"
  description "Statistic to use for the metric threshold"
  default "Average"
  allowed_values "Average", "Minimum", "Maximum"
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Cloud native tag key to ignore instances. Example: exclude_utilization"
  type "string"
  default ""
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscription_allowed_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
  default []
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Resize Instances"]
  default []
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera_Automation"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_billing_centers, $ds_billing_centers
end

script "js_top_level_billing_centers", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code "result = _.reject(ds_billing_centers, function(bc) { return bc.parent_id != null })"
end

datasource "ds_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item, "subscriptionId")
      field "subscriptionName", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_allowed_list
end

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_allowed_list"
  result "result"
  code <<-EOS
  result = []

  if (param_subscription_allowed_list.length != 0) {
    _.each(param_subscription_allowed_list, function(sub) {
      var found = _.find(ds_subscriptions, function(item) {
        return item['subscriptionId'] == sub || item['subscriptionName'].toLowerCase() == sub.toLowerCase()
      })

      result.push(found)
    })
  } else {
    result = ds_subscriptions
  }
EOS
end

datasource "ds_instance_costs" do
  iterate $ds_filtered_subscriptions
  request do
    run_script $js_instance_costs, val(iter_item, "subscriptionId"), $ds_top_level_billing_centers, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "resource_type", jmes_path(col_item, "dimensions.resource_type")
      field "adjustment_name", jmes_path(col_item, "dimensions.adjustment_name")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_instance_costs", type: "javascript" do
  parameters "subscriptionId", "ds_top_level_billing_centers", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  start_date = new Date()
  start_date.setMonth(start_date.getMonth() - 1)
  start_date = start_date.toISOString().split('-')[0] + '-' + start_date.toISOString().split('-')[1]

  end_date = new Date()
  end_date = end_date.toISOString().split('-')[0] + '-' + end_date.toISOString().split('-')[1]

  billing_center_ids = _.compact(_.map(ds_top_level_billing_centers, function(value) { return value.id }))

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      "dimensions": ["resource_id", "resource_type", "adjustment_name"],
      "granularity": "month",
      "start_at": start_date,
      "end_at": end_date,
      "metrics": ["cost_amortized_unblended_adj"],
      "billing_center_ids": billing_center_ids,
      "limit": 100000,
      "filter": {
        "type": "and",
        "expressions": [
          {
            "dimension": "service",
            "type": "equal",
            "value": "Microsoft.DBforMySQL"
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": subscriptionId
          }
        ]
      }
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_azure_mysql_single" do
  iterate $ds_filtered_subscriptions
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscriptionId"), "/providers/Microsoft.DBforMySQL/servers"])
    query "api-version", "2017-12-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "location", jmes_path(col_item, "location")
      field "type", jmes_path(col_item, "type")
      field "tags", jmes_path(col_item, "tags")
      field "sku", jmes_path(col_item, "sku")
      field "properties", jmes_path(col_item, "properties")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "subscriptionName")
    end
  end
end

datasource "ds_azure_mysql_flexible" do
  iterate $ds_filtered_subscriptions
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscriptionId"), "/providers/Microsoft.DBforMySQL/flexibleServers"])
    query "api-version", "2021-05-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "location", jmes_path(col_item, "location")
      field "type", jmes_path(col_item, "type")
      field "tags", jmes_path(col_item, "tags")
      field "sku", jmes_path(col_item, "sku")
      field "properties", jmes_path(col_item, "properties")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "subscriptionName")
    end
  end
end

datasource "ds_azure_mysql_single_metrics" do
  iterate $ds_azure_mysql_single
  request do
    run_script $js_azure_mysql_metrics, val(iter_item, "id"), $param_azure_endpoint
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", val(iter_item,"id")
      field "name", val(iter_item,"name")
      field "location", val(iter_item,"location")
      field "type", val(iter_item, "type")
      field "tags", val(iter_item, "tags")
      field "sku", val(iter_item, "sku")
      field "properties", val(iter_item, "properties")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "subscriptionName")
      field "unit", jmes_path(col_item, "unit")
      field "timeseries", jmes_path(col_item, "timeseries")

    end
  end
end

datasource "ds_azure_mysql_flexible_metrics" do
  iterate $ds_azure_mysql_flexible
  request do
    run_script $js_azure_mysql_metrics, val(iter_item, "id"), $param_azure_endpoint
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", val(iter_item,"id")
      field "name", val(iter_item,"name")
      field "location", val(iter_item,"location")
      field "type", val(iter_item, "type")
      field "tags", val(iter_item, "tags")
      field "sku", val(iter_item, "sku")
      field "properties", val(iter_item, "properties")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "subscriptionName")
      field "unit", jmes_path(col_item, "unit")
      field "timeseries", jmes_path(col_item, "timeseries")
    end
  end
end

script "js_azure_mysql_metrics", type: "javascript" do
  parameters "resource_id", "param_azure_endpoint"
  result "request"
  code <<-EOS
    end_date_tmp = new Date()
    end_date_tmp.setMilliseconds(999)
    end_date_tmp.setSeconds(59)
    end_date_tmp.setMinutes(59)
    end_date_tmp.setHours(23)
    end_date = new Date(end_date_tmp).toISOString()

    start_date_tmp = new Date(new Date().setDate(new Date().getDate() - 30))
    start_date_tmp.setMilliseconds(0)
    start_date_tmp.setSeconds(0)
    start_date_tmp.setMinutes(0)
    start_date = new Date(start_date_tmp).toISOString()

    timespan = start_date  + "/" + end_date

    var request = {
      auth: "auth_azure",
      verb: "GET",
      host: param_azure_endpoint,
      path: resource_id + "/providers/microsoft.insights/metrics",
      query_params: {
        "api-version": "2018-01-01",
        "timespan": timespan,
        "metricnames": "cpu_percent"
        "aggregation": "Maximum,Minimum,Average,count",
        "interval": "P1D" // Daily
      },
      // Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
      ignore_status: [400, 403, 404],
      headers: {
        "User-Agent" : "RS Policies"
      }
    }
  EOS
end

datasource "ds_single_resize_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera/policy_templates/master/data/azure/sql_service_tier_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_flexible_resize_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera/policy_templates/master/data/azure/mysql_flexible_tier_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_merged_single_metrics" do
  run_script $js_merged_metrics, $ds_azure_mysql_single_metrics, $ds_single_resize_map, $param_exclusion_tag_key, $param_cpu_downsize, $param_cpu_upsize, $param_threshold_statistic, "single"
end

datasource "ds_merged_flexible_metrics" do
  run_script $js_merged_metrics, $ds_azure_mysql_flexible_metrics, $ds_flexible_resize_map, $param_exclusion_tag_key, $param_cpu_downsize, $param_cpu_upsize, $param_threshold_statistic, "flexible"
end

script "js_merged_metrics", type: "javascript" do
  parameters "database_metrics", "resize_map", "exclusion_tag", "down_threshold", "up_threshold", "threshold_statistic", "db_type"
  result "result"
  code <<-EOS
  var result = []

  _.each(database_metrics, function(item) {
    if (item['sku'] != undefined && item['sku'] != null) {
      if (_.has(item['tags'], exclusion_tag) == false) {
        capacity = null
        recommended_capacity = null
        recommendation = null
        recommended_sku = null
        average_cpu = null
        sku_level = null
        sku_name = item['sku']['name']
        sku_tier = item['sku']['tier']
        sku_capacity = item['sku']['capacity']

        if (typeof item['timeseries'][0]['data'] == "object") {
          max_cpu = null, max_total = 0, max_count = 0
          min_cpu = null, min_total = 0, min_count = 0
          avg_cpu = null, avg_total = 0, avg_count = 0

          _.each(item['timeseries'][0]['data'], function(data) {
            if (isNaN(data['maximum']) == false) {
              max_total += data['maximum']
              max_count += 1
            }

            if (isNaN(data['minimum']) == false) {
              min_total += data['minimum']
              min_count += 1
            }

            if (isNaN(data['average']) == false) {
              avg_total += data['average']
              avg_count += 1
            }
          })

          if (max_count > 0) { max_cpu = (max_total / max_count).toFixed(2) }
          if (min_count > 0) { min_cpu = (min_total / min_count).toFixed(2) }
          if (avg_count > 0) { avg_cpu = (avg_total / avg_count).toFixed(2) }
        }

        if (threshold_statistic == "Maximum") { test_cpu = max_cpu }
        if (threshold_statistic == "Minimum") { test_cpu = min_cpu }
        if (threshold_statistic == "Average") { test_cpu = avg_cpu }

        if (test_cpu != null) {
          if (Number(test_cpu) > Number(up_threshold) && Number(up_threshold) != -1) {
            recommendation = "Upsize"
            sku_level = "up"
          }

          if (Number(test_cpu) < Number(down_threshold) && Number(down_threshold) != -1) {
            recommendation = "Downsize"
            sku_level = "down"
          }

          if (sku_level != null) {
            if (resize_map[sku_tier] != undefined && resize_map[sku_tier] != null) {
              if (resize_map[sku_tier][sku_name] != undefined && resize_map[sku_tier][sku_name] != null) {
                if (resize_map[sku_tier][sku_name][sku_level] != undefined && resize_map[sku_tier][sku_name][sku_level] != null) {
                  capacity = resize_map[sku_tier][sku_name][sku_level]
                }
              }
            }
          }

          recommended_capacity = "N/A"

          if (capacity != null && capacity.length > 0) {
            recommended_capacity = capacity
          }
        } else {
          recommendation = "-"
          recommended_capacity = "N/A"
        }

        if (recommended_capacity == "N/A" && recommendation != "-") {
          recommendation = "Change tier"
        }

        if (isNaN(test_cpu) == false && recommendation != "-" && recommendation != null) {
          if (db_type == "single") {
            category = "Single"
            capacity = sku_capacity

            if (isNaN(recommended_capacity) == false) {
              // Replace final number in SKU name with recommended capacity
              recommended_sku = []

              for (var i = 0; i < sku_name.split('_').length - 1; i++) {
                recommended_sku.push(sku_name.split('_')[i])
              }

              recommended_sku.push(recommended_capacity)
              recommended_sku = recommended_sku.join('_')
            }
          }

          if (db_type == "flexible") {
            category = "Flexible"
            capacity = sku_name.split('_')[1].replace(/[^0-9]/g, "")
            recommended_sku = resize_map[sku_tier][sku_name][sku_level + '_sku']
          }

          result.push({
            id: item['id'],
            location: item['location'],
            average_cpu: avg_cpu,
            maximum_cpu: max_cpu,
            minimum_cpu: min_cpu,
            name: item['name'],
            resource_group: item['id'].split('/')[4],
            type: item['type'],
            sku: item['sku'],
            capacity: capacity,
            unit: item['unit'],
            tags: item['tags'],
            recommendation: recommendation,
            recommended_capacity: recommended_capacity,
            recommended_sku: recommended_sku,
            subscriptionId: item['subscriptionId'],
            subscriptionName: item['subscriptionName'],
            category: category
          })
        }
      }
    }
  })
EOS
end

datasource "ds_combined_data" do
  run_script $js_combined_data, $ds_merged_single_metrics, $ds_merged_flexible_metrics, $ds_instance_costs, $ds_currency_reference, $ds_currency_code
end

script "js_combined_data", type: "javascript" do
  parameters "ds_merged_single_metrics", "ds_merged_flexible_metrics", "ds_instance_costs", "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  result = []
  currency = "$"

  if (ds_currency_code['value'] !== undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      currency = ds_currency_reference[ds_currency_code['value']]['symbol']
    }
  }

  instance_costs = {}

  _.each(ds_instance_costs, function(item) {
    resource_id = item['resource_id'].toLowerCase()

    if (instance_costs[resource_id] == undefined) {
      instance_costs[resource_id] = 0
    }

    instance_costs[resource_id] += item['cost']
  })

  _.each(ds_merged_single_metrics.concat(ds_merged_flexible_metrics), function(instance) {
    if (instance['recommendation'] != "-" && instance['recommendation'] != null) {
      cost = ""
      savings = ""

      instance_cost = instance_costs[instance['id'].toLowerCase()]

      if (instance_cost != null && instance_cost != undefined) {
        cost = parseFloat(instance_cost).toFixed(3)
        savings = parseFloat(instance_cost / 2).toFixed(3)
      }

      result.push({
        id: instance['id'],
        location: instance['location'],
        average_cpu: instance['average_cpu'],
        maximum_cpu: instance['maximum_cpu'],
        minimum_cpu: instance['minimum_cpu'],
        name: instance['name'],
        resource_group: instance['resource_group'],
        type: instance['type'],
        sku: instance['sku'],
        capacity: instance['capacity'],
        unit: instance['unit'],
        tags: instance['tags'],
        recommendation: instance['recommendation'],
        recommended_sku: instance['recommended_sku'],
        recommended_capacity: instance['recommended_capacity'],
        subscriptionId: instance['subscriptionId'],
        subscriptionName: instance['subscriptionName'],
        category: instance['category'],
        savingsCurrency: currency,
        cost: cost,
        savings: savings
      })
    }
  })

  result = _.sortBy(result, 'name')
  result = _.sortBy(result, 'subscriptionName')
  result = _.sortBy(result, 'category')
EOS
end

###############################################################################
# Policy
###############################################################################

policy "poly_azure_db_utilization" do
  validate $ds_combined_data do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Azure Rightsize MySQL Database Recommendations"
    detail_template <<-EOS
      ### Thresholds for Consideration
      - CPU Statistic Used      : {{ parameters.param_threshold_statistic }} CPU Usage
      - Upsize CPU% threshold   : {{ parameters.param_cpu_upsize }}
      - Downsize CPU% threshold : {{ parameters.param_cpu_downsize }}
    EOS
    escalate $esc_email
    escalate $esc_rightsize_db
    check eq(size(data), 0)
    export do
      resource_level true
      field "subscriptionId" do
        label "Subscription ID"
      end
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "resource_group" do
        label "Resource Group"
      end
      field "resourceID" do
        label "Resource ID"
        path "id"
      end
      field "location" do
        label "Location"
      end
      field "name" do
        label "Name"
      end
      field "type" do
        label "Type"
      end
      field "category" do
        label "Category"
      end
      field "skuCapacity" do
        label "Current Capacity"
        path "capacity"
      end
      field "recommended_capacity" do
        label "Recommended Capacity"
      end
      field "recommended_sku" do
        label "Recommended SKU Name"
      end
      field "cost" do
        label "Estimated Monthly Cost"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "skuName" do
        label "SKU - Name"
        path "sku.name"
      end
      field "skuTier" do
        label "SKU - Tier"
        path "sku.tier"
      end
      field "minimum_cpu" do
        label "CPU Minimum (%)"
      end
      field "average_cpu" do
        label "CPU Average (%)"
      end
      field "maximum_cpu" do
        label "CPU Maximum (%)"
      end
      field "recommendation" do
        label "Recommendation"
      end
      field "id" do
        label "ID"
      end
      field "accountName" do
        label "Account Name"
        path "subscriptionName"
      end
      field "accountID" do
        label "Account ID"
        path "subscriptionId"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Sends incident email"
  email $param_email
end

escalation "esc_rightsize_db" do
  automatic contains($param_automatic_action, "Resize Instances")
  label "Resize Database"
  description "Resized selected MySQL database"
  run "rightsize_db", data, $param_log_to_cm_audit_entries, $param_azure_endpoint, rs_optima_host
end

###############################################################################
# Cloud Workflow
###############################################################################

define rightsize_db($data, $param_log_to_cm_audit_entries, $param_azure_endpoint, $$rs_optima_host) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $all_responses = []
  foreach $item in $data do
    if $item["recommended_capacity"] != "N/A"
      sub on_error: skip do
        if $item["category"] == "Single"
          $body = {
            "sku": {
              "name": $item["skuName"],
              "tier": $item["skuTier"],
              "capacity": $item["recommended_capacity"]
            }
          }

          $apiversion = "2017-12-01"
        end

        if $item["category"] == "Flexible"
          $body = {
            "sku": {
              "name": $item["recommended_sku"],
              "tier": $item["skuTier"]
            }
          }

          $apiversion = "2021-05-01"
        end

        $response = http_request(
          auth: $$azure_auth,
          verb: "PATCH",
          host: $param_azure_endpoint,
          https: true,
          href: $item["id"],
          query_strings: {
            "api-version": $apiversion
          },
          body: $body
        )

        call sys_log('Update RightSize Azure MySQL Databases: ', to_s($response))
        $all_responses << $response
      end
    end
  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end
