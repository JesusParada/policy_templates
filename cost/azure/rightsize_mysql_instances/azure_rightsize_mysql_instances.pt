name "Azure Rightsize MySQL Databases"
rs_pt_ver 20180301
type "policy"
short_description "Check for Inefficient Azure MySQL database services that are inside or outside the CPU threshold for the last 30 days and resizes them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/rightsize_sql_instances/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "1.0",
  provider: "Azure",
  service: "DBforMySQL",
  policy_set: "RightSize Database Services"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_avg_cpu_upsize" do
  type "number"
  label "Average used CPU % - Upsize threshold"
  description "Set to -1 to ignore CPU utilization"
  default 80
  min_value -1
  max_value 100
end

parameter "param_avg_cpu_downsize" do
  type "number"
  label "Average used CPU % - Downsize Threshold"
  description "Set to -1 to ignore CPU utilization"
  default 60
  min_value -1
  max_value 100
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Cloud native tag key to ignore instances. Example: exclude_utilization"
  type "string"
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscription_allowed_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Resize Instances"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

###############################################################################
# Pagination
###############################################################################
pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_allowed_list
end

datasource "ds_azure_mysql_single" do
  iterate $ds_filtered_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.DBforMySQL/servers"])
    query "api-version", "2017-12-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400,403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "location", jmes_path(col_item, "location")
      field "type", jmes_path(col_item, "type")
      field "tags", jmes_path(col_item, "tags")
      field "sku", jmes_path(col_item, "sku")
      field "properties", jmes_path(col_item, "properties")
      field "subscriptionId",val(iter_item, "subscriptionId")
      field "subscriptionName",val(iter_item, "displayName")
    end
  end
end

datasource "ds_azure_mysql_flexible" do
  iterate $ds_filtered_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.DBforMySQL/flexibleServers"])
    query "api-version", "2021-05-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400,403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "location", jmes_path(col_item, "location")
      field "type", jmes_path(col_item, "type")
      field "tags", jmes_path(col_item, "tags")
      field "sku", jmes_path(col_item, "sku")
      field "properties", jmes_path(col_item, "properties")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "displayName")
    end
  end
end

datasource "ds_azure_mysql_single_metrics" do
  iterate $ds_azure_mysql_single
  request do
    run_script $js_utilization_request, val(iter_item,"id"), $param_azure_endpoint
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", val(iter_item,"id")
      field "name", val(iter_item,"name")
      field "location", val(iter_item,"location")
      field "type", val(iter_item, "type")
      field "tags", val(iter_item, "tags")
      field "sku", val(iter_item, "sku")
      field "properties", val(iter_item, "properties")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "subscriptionName")
      field "unit", jmes_path(col_item, "unit")
      field "timeseries", jmes_path(col_item, "timeseries")

    end
  end
end

datasource "ds_azure_mysql_flexible_metrics" do
  iterate $ds_azure_mysql_flexible
  request do
    run_script $js_utilization_request, val(iter_item,"id"), $param_azure_endpoint
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", val(iter_item,"id")
      field "name", val(iter_item,"name")
      field "location", val(iter_item,"location")
      field "type", val(iter_item, "type")
      field "tags", val(iter_item, "tags")
      field "sku", val(iter_item, "sku")
      field "properties", val(iter_item, "properties")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "subscriptionName")
      field "unit", jmes_path(col_item, "unit")
      field "timeseries", jmes_path(col_item, "timeseries")
    end
  end
end

#Generates list of service tiers.
datasource "ds_azure_sql_resize_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera/policy_templates/master/data/azure/sql_service_tier_types.json"
    header "User-Agent", "RS Policies"
  end
end

# datasource "ds_flexible_resize_map" do
#   request do
#     verb "GET"
#     host "raw.githubusercontent.com"
#     path "/flexera/policy_templates/master/data/azure/mysql_flexible_tier_types.json"
#     header "User-Agent", "RS Policies"
#   end
# end

datasource "ds_flexible_resize_map" do
  run_script $js_flexible_resize_map
end

datasource "ds_merged_single_metrics" do
  run_script $js_merged_single_metrics, $ds_azure_mysql_single_metrics, $ds_azure_sql_resize_map, $param_exclusion_tag_key, $param_avg_cpu_downsize, $param_avg_cpu_upsize
end

datasource "ds_merged_flexible_metrics" do
  run_script $js_merged_flexible_metrics, $ds_azure_mysql_flexible_metrics, $ds_flexible_resize_map, $param_exclusion_tag_key, $param_avg_cpu_downsize, $param_avg_cpu_upsize
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_merged_single_metrics, $ds_merged_flexible_metrics
end

###############################################################################
# Scripts
###############################################################################

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_allowed_list"
  result "results"
  code <<-EOS
  var results = []
  if ( param_subscription_allowed_list.length != 0){
    results = []
    _.each(param_subscription_allowed_list, function(sub){
      var found = _.find(ds_subscriptions, function(item){
        return item.subscriptionId == sub || item.displayName.toLowerCase() == sub.toLowerCase();
      })
      results.push(found)
    })
  } else {
    results = ds_subscriptions
  }
EOS
end

# Build the API request object dynamically
script "js_utilization_request", type: "javascript" do
  parameters "resource_id", "param_azure_endpoint"
  result "request"
  code <<-EOS
    var end_date_tmp = new Date()
    end_date_tmp.setMilliseconds(999)
    end_date_tmp.setSeconds(59)
    end_date_tmp.setMinutes(59)
    end_date_tmp.setHours(23)
    var end_date = new Date(end_date_tmp).toISOString()
    var start_date_tmp = new Date(new Date().setDate(new Date().getDate() - 30))
    start_date_tmp.setMilliseconds(0)
    start_date_tmp.setSeconds(0)
    start_date_tmp.setMinutes(0)
    var start_date = new Date(start_date_tmp).toISOString()
    var sTimespan = start_date  + "/" + end_date;
    var request = {
      auth: "azure_auth",
      verb : "GET",
      scheme : "https",
      host : param_azure_endpoint,
      path : "" + resource_id + "/providers/microsoft.insights/metrics",
      query_params: {
        "api-version" : "2018-01-01",
        "timespan" : sTimespan,
        "metricnames" : "cpu_percent"
        "aggregation" : "Average,count",
        "interval" :  "P1D"                    //Dailey
      },
      // Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
      ignore_status: [400,403,404],
      headers: {
        "User-Agent" : "RS Policies"
      }
    }
  EOS
end

script "js_merged_single_metrics", type: "javascript" do
  parameters "databases_metrics", "ds_azure_sql_resize_map", "exclusion_tag" , "down_threshold", "up_threshold"
  result "result"
  code <<-EOS
    var result = [];

    //exclude the database with the exclution tags, and the system databases
    for(i=0; i< databases_metrics.length; i++){
      if (databases_metrics[i].sku !== undefined && databases_metrics[i].sku != null){
        if (!(_.has(databases_metrics[i].tags, exclusion_tag))) {
          //Find the Resource group
          var capacity = "";
          var recommended_capacity = "";
          var recommendation = "";
          var aTemp = databases_metrics[i].id.split("/resourceGroups/")
          var resource_group="";
          if(aTemp.length > 1){
            aTemp = aTemp[1].split("/");
            resource_group = aTemp[0];
          }else{
            resource_group = "";
          }

          //now find the metrics for the devices
          var objMetric = databases_metrics[i];
          var total = 0.0;
          var average_cpu = "";
          if (typeof objMetric == "object" && typeof objMetric.timeseries[0].data == "object"){
            var ts_data =  objMetric.timeseries[0].data;
            for (x=0; x < ts_data.length; x++) {
              total += ts_data[x].average;
            }
            average_cpu = total / ts_data.length;
            average_cpu = average_cpu.toFixed(2);
          }else{
            average_cpu = "n/a";
          }
          var sku = databases_metrics[i].sku;
          //Now check for recommendation
          if(average_cpu !== "n/a"){
            if(Number(average_cpu) >= Number(up_threshold)){
              //Upsize
              recommendation = "Upsize";
              if (databases_metrics[i].sku !== undefined && databases_metrics[i].sku != null && ds_azure_sql_resize_map[sku.tier] !== undefined && ds_azure_sql_resize_map[sku.tier] != null){
                var json_tier = ds_azure_sql_resize_map[sku.tier];
                if (json_tier[sku.name] !== undefined && json_tier[sku.name] != null){
                  var json_name = json_tier[sku.name];
                  if (json_name["up"] !== undefined && json_name["up"] != null){
                    capacity = json_name["up"];
                  }
                }
              }
              if(capacity != null && capacity.length > 0){
                recommended_capacity = capacity;
              }else{
                recommended_capacity = "n/a";
              }
            }else if(Number(average_cpu) <= Number(down_threshold)){
              //Downsize
              recommendation = "Downsize";
              if (databases_metrics[i].sku !== undefined && databases_metrics[i].sku != null && ds_azure_sql_resize_map[sku.tier] !== undefined && ds_azure_sql_resize_map[sku.tier] != null){
                if (sku.tier === "Basic"){
                  recommendation = "-";
                }
                var json_tier = ds_azure_sql_resize_map[sku["tier"]];
                if (json_tier[sku.name] !== undefined && json_tier[sku.name] != null){
                  var json_name = json_tier[sku.name];
                  if (json_name["down"] !== undefined && json_name["down"] != null){
                    capacity = json_name["down"];
                  }
                }
              }
              if(capacity != null && capacity.length > 0){
                recommended_capacity = capacity;
              }else{
                recommended_capacity = "n/a";
              }
            }
          }else{
            recommendation = "-";
            recommended_capacity = "n/a";
          }
          if (recommended_capacity === "n/a" && recommendation !== "-"){
            recommendation = "Change tier"
          }
          if (isNaN(average_cpu) == false && sku.name !== "ElasticPool"){
            result.push({
              id: databases_metrics[i].id,
              location: databases_metrics[i].location,
              average_cpu: average_cpu,
              name: databases_metrics[i].name,
              resource_group: resource_group,
              type: databases_metrics[i].type,
              sku: databases_metrics[i].sku,
              capacity: databases_metrics[i].sku.capacity,
              unit: databases_metrics[i].unit,
              tags: databases_metrics[i].tags,
              recommendation: recommendation,
              recommended_capacity: recommended_capacity,
              subscriptionId: databases_metrics[i].subscriptionId,
              subscriptionName: databases_metrics[i].subscriptionName,
              category: "Single"
            })
          }
        }
      }
    }
    result=_.sortBy(result, 'subscriptionName');
    result=_.sortBy(result, 'location');
    result=_.sortBy(result, 'name');
  EOS
end

script "js_merged_flexible_metrics", type: "javascript" do
  parameters "databases_metrics", "ds_azure_sql_resize_map", "exclusion_tag" , "down_threshold", "up_threshold"
  result "result"
  code <<-EOS
  var result = [];

  //exclude the database with the exclution tags, and the system databases
  for(i=0; i< databases_metrics.length; i++){
    if (databases_metrics[i].sku !== undefined && databases_metrics[i].sku != null){
      if (!(_.has(databases_metrics[i].tags, exclusion_tag))) {
        //Find the Resource group
        var capacity = "";
        var recommended_capacity = "";
        var recommendation = "";
        var aTemp = databases_metrics[i].id.split("/resourceGroups/")
        var resource_group="";
        if(aTemp.length > 1){
          aTemp = aTemp[1].split("/");
          resource_group = aTemp[0];
        }else{
          resource_group = "";
        }

        //now find the metrics for the devices
        var objMetric = databases_metrics[i];
        var total = 0.0;
        var average_cpu = "";
        if (typeof objMetric == "object" && typeof objMetric.timeseries[0].data == "object"){
          var ts_data =  objMetric.timeseries[0].data;
          for (x=0; x < ts_data.length; x++) {
            total += ts_data[x].average;
          }
          average_cpu = total / ts_data.length;
          average_cpu = average_cpu.toFixed(2);
        }else{
          average_cpu = "n/a";
        }
        var sku = databases_metrics[i].sku;
        //Now check for recommendation
        if(average_cpu !== "n/a"){
          if(Number(average_cpu) >= Number(up_threshold)){
            //Upsize
            recommendation = "Upsize";
            if (databases_metrics[i].sku !== undefined && databases_metrics[i].sku != null && ds_azure_sql_resize_map[sku.tier] !== undefined && ds_azure_sql_resize_map[sku.tier] != null){
              var json_tier = ds_azure_sql_resize_map[sku.tier];
              if (json_tier[sku.name] !== undefined && json_tier[sku.name] != null){
                var json_name = json_tier[sku.name];
                if (json_name["up"] !== undefined && json_name["up"] != null){
                  capacity = json_name["up"];
                }
              }
            }
            if(capacity != null && capacity.length > 0){
              recommended_capacity = capacity;
            }else{
              recommended_capacity = "n/a";
            }
          }else if(Number(average_cpu) <= Number(down_threshold)){
            //Downsize
            recommendation = "Downsize";
            if (databases_metrics[i].sku !== undefined && databases_metrics[i].sku != null && ds_azure_sql_resize_map[sku.tier] !== undefined && ds_azure_sql_resize_map[sku.tier] != null){
              if (sku.tier === "Basic"){
                recommendation = "-";
              }
              var json_tier = ds_azure_sql_resize_map[sku["tier"]];
              if (json_tier[sku.name] !== undefined && json_tier[sku.name] != null){
                var json_name = json_tier[sku.name];
                if (json_name["down"] !== undefined && json_name["down"] != null){
                  capacity = json_name["down"];
                }
              }
            }
            if(capacity != null && capacity.length > 0){
              recommended_capacity = capacity;
            }else{
              recommended_capacity = "n/a";
            }
          }
        }else{
          recommendation = "-";
          recommended_capacity = "n/a";
        }
        if (recommended_capacity === "n/a" && recommendation !== "-"){
          recommendation = "Change tier"
        }
        if(isNaN(average_cpu) == false && sku.name !== "ElasticPool"){
          result.push({
            id: databases_metrics[i].id,
            location: databases_metrics[i].location,
            average_cpu: average_cpu,
            name: databases_metrics[i].name,
            resource_group: resource_group,
            type: databases_metrics[i].type,
            sku: databases_metrics[i].sku,
            capacity: databases_metrics[i].sku.name.split('_')[1].replace(/[^0-9]/g, ""),
            unit: databases_metrics[i].unit,
            tags: databases_metrics[i].tags,
            recommendation: recommendation,
            recommended_capacity: recommended_capacity,
            subscriptionId: databases_metrics[i].subscriptionId,
            subscriptionName: databases_metrics[i].subscriptionName,
            category: "Flexible"
          })
        }
      }
    }
  }
  result=_.sortBy(result, 'subscriptionName');
  result=_.sortBy(result, 'location');
  result=_.sortBy(result, 'name');
EOS
end

script "js_merged_metrics", type: "javascript" do
  parameters "single_metrics", "flexible_metrics"
  result "result"
  code <<-EOS
  result = single_metrics.concat(flexible_metrics)
EOS
end

script "js_flexible_resize_map", type: "javascript" do
  result "result"
  code <<-EOS
  result = {
    "Burstable": {
      "Standard_B1s": {
        "up": "2",
        "down": null
      },
      "Standard_B1ms": {
        "up": "2",
        "down": null
      },
      "Standard_B2s": {
        "up": "4",
        "down": "1"
      },
      "Standard_B2ms": {
        "up": "4",
        "down": "1"
      },
      "Standard_B4ms": {
        "up": "8",
        "down": "2"
      },
      "Standard_B8ms": {
        "up": "12",
        "down": "4"
      },
      "Standard_B12ms": {
        "up": "16",
        "down": "8"
      },
      "Standard_B16ms": {
        "up": "20",
        "down": "12"
      },
      "Standard_B20ms": {
        "up": null,
        "down": "16"
      }
    },
    "GeneralPurpose": {
      "Standard_D2ads_v5": {
        "up": "4",
        "down": null
      },
      "Standard_D2ds_v4": {
        "up": "4",
        "down": null
      },
      "Standard_D4ads_v5": {
        "up": "8",
        "down": "2"
      },
      "Standard_D4ds_v4": {
        "up": "8",
        "down": "2"
      },
      "Standard_D8ads_v5": {
        "up": "16",
        "down": "4"
      },
      "Standard_D8ds_v4": {
        "up": "16",
        "down": "4"
      },
      "Standard_D16ads_v5": {
        "up": "32",
        "down": "8"
      },
      "Standard_D16ds_v4": {
        "up": "32",
        "down": "8"
      },
      "Standard_D32ads_v5": {
        "up": "48",
        "down": "16"
      },
      "Standard_D32ds_v4": {
        "up": "48",
        "down": "16"
      },
      "Standard_D48ads_v5": {
        "up": "64",
        "down": "32"
      },
      "Standard_D48ds_v4": {
        "up": "64",
        "down": "32"
      },
      "Standard_D64ads_v5": {
        "up": null,
        "down": "48"
      },
      "Standard_D64ds_v4": {
        "up": null,
        "down": "48"
      }
    },
    "MemoryOptimized": {
      "Standard_E2ds_v4": {
        "up": "4",
        "down": null
      },
      "Standard_E2ads_v5": {
        "up": "4",
        "down": null
      },
      "Standard_E4ds_v4": {
        "up": "8",
        "down": "2"
      },
      "Standard_E4ads_v5": {
        "up": "8",
        "down": "2"
      },
      "Standard_E8ds_v4": {
        "up": "16",
        "down": "4"
      },
      "Standard_E8ads_v5": {
        "up": "16",
        "down": "4"
      },
      "Standard_E16ds_v4": {
        "up": "32",
        "down": "8"
      },
      "Standard_E16ads_v5": {
        "up": "32",
        "down": "8"
      },
      "Standard_E32ds_v4": {
        "up": "48",
        "down": "16"
      },
      "Standard_E32ads_v5": {
        "up": "48",
        "down": "16"
      },
      "Standard_E48ds_v4": {
        "up": "64",
        "down": "32"
      },
      "Standard_E48ads_v5": {
        "up": "64",
        "down": "32"
      },
      "Standard_E64ds_v4": {
        "up": "80",
        "down": "48"
      },
      "Standard_E64ads_v5": {
        "up": "80",
        "down": "48"
      },
      "Standard_E80ids_v4": {
        "up": null,
        "down": "64"
      },
      "Standard_E2ds_v5": {
        "up": "4",
        "down": null
      },
      "Standard_E4ds_v5": {
        "up": "8",
        "down": "2"
      },
      "Standard_E8ds_v5": {
        "up": "16",
        "down": "4"
      },
      "Standard_E16ds_v5": {
        "up": "32",
        "down": "8"
      },
      "Standard_E32ds_v5": {
        "up": "48",
        "down": "16"
      },
      "Standard_E48ds_v5": {
        "up": "64",
        "down": "32"
      },
      "Standard_E64ds_v5": {
        "up": "96",
        "down": "48"
      },
      "Standard_E96ds_v5": {
        "up": null,
        "down": "64"
      }
    }
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy 'policy_azure_db_utilization' do
  validate $ds_merged_metrics do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): Found {{ len data }} Azure Rightsize MySQL Database"
    detail_template <<-EOS
      ### Thresholds for Consideration
      - Upsize Average CPU% threshold   : {{ parameters.param_avg_cpu_upsize }}
      - Downsize Average CPU% threshold : {{ parameters.param_avg_cpu_downsize }}
    EOS
    escalate $email_report
    check eq(size(data),0)
    export do
      resource_level true
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "location" do
        label "Location"
      end
      field "name" do
        label "Name"
      end
      field "resource_group" do
        label "Resource Group"
      end
      field "type" do
        label "Type"
      end
      field "category" do
        label "Category"
      end
      field "skuCapacity" do
        label "Current Capacity"
        path "capacity"
      end
      field "recommended_capacity" do
        label "Recommended Capacity"
      end
      field "skuName" do
        label "SKU - Name"
        path "sku.name"
      end
      field "skuTier" do
        label "SKU - Tier"
        path "sku.tier"
      end
      field "average_cpu" do
        label "CPU Average %"
      end
      field "recommendation" do
        label "Recommendation"
      end
      field "id" do
        label "Id"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email_report" do
  automatic true
  label "Send Email"
  description "Sends incident email"
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################
