name "Turbonomics Scale Virtual Machine Recommendations GCP"
rs_pt_ver 20180301
type "policy"
short_description "POC turbonomics policy for scaling virtual machines [README](https://github.com/flexera-public/policy_templates/tree/master/cost/turbonomics/scale_virtual_machines_recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "0.1",
  provider: "GCE",
  source: "Turbonomics",
  service: "Compute",
  policy_set: "Scale VMs",
  recommendation_type: "Usage Reduction"
)

##################
# Parameters   #
##################

## once functionality allows, this will contain "ALL", "AWS", "Azure Subscription", "GCP Project" and we will remove the policies from thier folders
parameter "param_provider" do
  type "string"
  label "Recommendation Vendor"
  description "authorization cookie pulled from manual source. Allows \"\", GCP Project, AWS, or Azure Subscription as a value"
  allowed_values "GCP Project"
end

parameter "param_auth_cookie" do
  type "string"
  label "Authorization Cookie"
  description "authorization cookie pulled from manual source"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with password and username - not implemented and needs work done
#credentials "turbo_auth" do
#  schemes "api_key"
#  label "Turbonomics"
#  description "Select the Turbonomic Basic Auth Credential from the list."
#end

###############################################################################
# Pagination
###############################################################################

pagination "turbonomics_vm_pagination_header" do
  get_page_marker do
    header "x-next-cursor"
  end
  set_page_marker do
    query "cursor"
  end
end

###############################################################################
# Datasources
###############################################################################

#get turbonomic recommendation data
datasource "ds_get_turbonomics_recommendations" do
  request do
    run_script $js_get_turbonomics_recommendations, $param_auth_cookie
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "uuid", jmes_path(col_item, "uuid")
      field "accountID", jmes_path(col_item, "target.aspects.cloudAspect.businessAccount.displayName")
      field "accountName", jmes_path(col_item, "currentEntity.discoveredBy.displayName")
      field "resourceGroup", jmes_path(col_item, "target.aspects.cloudAspect.resourceGroup.displayName")
      field "resourceID", jmes_path(col_item, "target.vendorIds")
      field "resourceName", jmes_path(col_item, "target.displayName")
      field "region", jmes_path(col_item, "currentLocation.displayName")
      field "resourceType", jmes_path(col_item, "currentEntity.displayName")
      field "newResourceType", jmes_path(col_item, "newEntity.displayName")
      field "provider", jmes_path(col_item, "target.discoveredBy.type")
      field "details", jmes_path(col_item, "details")
      field "tags", jmes_path(col_item, "target.tags")
      field "createdTime", jmes_path(col_item, "createTime")
      field "savings", jmes_path(col_item, "stats[0].value")
      field "savingsCurrency", jmes_path(col_item, "stats[0].units")
    end
  end
end

##this will potentially be a lot of calls. how to make this more performant
datasource "ds_get_action_details" do
  request do
    run_script $js_get_action_details, $param_auth_cookie, $ds_get_turbonomics_recommendations
  end
  result do
    encoding "json"
    field "uuids", response
  end
end

datasource "ds_filtered_turbonomics_recommendations" do
  run_script $js_filtered_turbonomics_recommendations, $ds_get_turbonomics_recommendations, $ds_get_action_details, $param_provider
end

###############################################################################
# Scripts
###############################################################################

##script using a manually acquired turbonomic cookie and pulls hard coded scalable vm data
script "js_get_turbonomics_recommendations", type: "javascript" do
  result "request"
  parameters "param_auth_cookie"
  code <<-EOS
  //replace cookie every day this is run
  //up this limit value to 1000 etc when done with POC testing
    var request = {
      verb: "POST",
      pagination: "turbonomics_vm_pagination_header",
      host: "sales1.demo.turbonomic.com",
      path: "/api/v3/markets/Market/actions",
      body_fields: {
        "actionStateList": ["READY", "ACCEPTED", "QUEUED", "IN_PROGRESS"],
        "actionTypeList":["SCALE"],
        "relatedEntityTypes":["VirtualMachine"],
        "environmentType":"CLOUD",
        "detailLevel":"EXECUTION",
        "costType":"SAVING"
      },
      query_params: {
        "limit": '100'
      },
      headers: {
        "Content-Type": "application/json"
        "Cookie": param_auth_cookie
      }
    }
EOS
end

##
script "js_get_action_details", type: "javascript" do
  result "request"
  parameters "param_auth_cookie", "ds_get_turbonomics_recommendations"
  code <<-EOS
  //replace cookie every day this is run
    var uuids = []
    _.each(ds_get_turbonomics_recommendations, function(instance){
      uuids.push(instance.uuid)
    })
    var request = {
      verb: "POST",
      host: "sales1.demo.turbonomic.com",
      path: "/api/v3/actions/details",
      body_fields: {
        "uuids": uuids,
      },
      query_params: {
        "limit": '100'
      },
      headers: {
        "Content-Type": "application/json"
        "Cookie": param_auth_cookie
      }
    }
EOS
end

script "js_filtered_turbonomics_recommendations", type: "javascript" do
  result "result"
  parameters "ds_get_turbonomics_recommendations", "ds_get_action_details", "param_provider"
  code <<-EOS
    instances = []
    monthlySavings = 0.0
    function formatNumber(number, separator){
    var numString =number.toString()
    var values=numString.split(".")
    var result = ''
    while (values[0].length > 3){
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if (values[0].length > 0){
      result = values[0] + result
    }
    if(values[1]==undefined){
      return result
    }
    return result+"."+values[1]
    }
    Object.keys(ds_get_action_details.uuids).forEach(function(uuid) {
      _.each(ds_get_turbonomics_recommendations, function(vm, index){
        if (vm.uuid === uuid) {
          ds_get_turbonomics_recommendations[index].uptime = ds_get_action_details.uuids[uuid].entityUptime.uptimePercentage
        }
      })
    })
    _.each(ds_get_turbonomics_recommendations, function(vm){
      if (vm.provider === param_provider || param_provider === "ALL") {
        if (vm.savingsCurrency === undefined || vm.savingsCurrency === null) {
          vm.savingsCurrency = "$"
        } else {
          if (vm.savingsCurrency.indexOf("$") != -1) {
            vm.savingsCurrency = "$"
          }
        }

        tags = []
        if (typeof vm.tags === "undefined" || vm.tags === null){
          vm.tags = tags
        }else{
          Object.keys(vm['tags']).forEach(function(key) {
            tags.push(key+'='+vm['tags'][key][0])
          });
        }
        vm.tags = tags
        if (vm.provider === "Azure Subscription") {
          Object.keys(vm.resourceID).forEach(function(key) {
            vm.resourceID = "/subscriptions/" + vm.resourceID[key] + "/resourceGroups/" + vm.resourceGroup + "/providers/Microsoft.Compute/virtualMachines/" + vm.resourceName
            return
          });
        } else {
          Object.keys(vm.resourceID).forEach(function(key) {
            vm.resourceID = vm.resourceID[key]
            return
          });
        }
        vm.service = "Compute"
        savingsString = ""
        if (typeof vm.savings === "undefined" || vm.savings === null || vm.savings === "" || isNaN(vm.savings)) {
          vm.savings = 0.0
        }

        vm.savings = (Math.round(vm.savings * 730 * 1000 * (vm.uptime/100)) / 1000)
        monthlySavings = monthlySavings + vm.savings
        instances.push(vm)
      }
    })
    pretty_savings = instances[0].savingsCurrency + ' ' + formatNumber(monthlySavings.toFixed(2), ",")
    message = "The total estimated monthly savings are " + pretty_savings + '.'
    result = {
      'instances': instances,
      'message': message
    }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_turbonomics_scale_vms" do
  validate $ds_filtered_turbonomics_recommendations do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.instances }} Turbonomic Scalable Virtual Machines found"
    detail_template <<-EOS
## Turbonomics Scale Virtual Machines POC
{{data.message}}
EOS
    check eq(size(val(data, "instances")), 0)
    export "instances" do
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "savings" do
        label "Savings"
      end
      field "details" do
        label "Recommendation Details"
      end
      field "uptime" do
        label "Virtual Machine Uptime Percentage"
      end
      field "currentResourceType" do
        label "Current Compute Tier"
        path "resourceType"
      end
      field "newResourceType" do
        label "New Compute Tier"
      end
      field "region" do
        label "Region"
      end
      field "service" do
        label "Service"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "tags" do
        label "Tags"
      end
      field "provider" do
        label "Cloud Provider"
      end
      field "createdTime" do
        label "Created Time"
      end
      field "id" do
        label "Resource ID"
        path "resourceID"
      end
    end
    escalate $esc_email
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################
