name "Turbonomics Recommendations POC"
rs_pt_ver 20180301
type "policy"
short_description "Checks for snapshots older than specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/old_snapshots) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "4.0",
  provider: "Azure",
  service: "Storage",
  policy_set: "Old Snapshots"
)

##################
# Parameters   #
##################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with password and username - not implemented
#credentials "turbo_auth" do
#  schemes "api_key"
#  label "Turbonomics"
#  description "Select the Turbonomic Basic Auth Credential from the list."
#end

###############################################################################
# Pagination
###############################################################################


###############################################################################
# Datasources
###############################################################################

#get all subscription details. VERIFY IT ONLY CONTAINS ONE VDISK
datasource "ds_get_turbonomics_recommendations" do
  request do
    run_script $js_get_turbonomics_recommendations
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "accountID", jmes_path(col_item, "target.uuid")
      field "accountName", jmes_path(col_item, "target.displayName")
      field "resourceGroup", jmes_path(col_item, "target.aspects.cloudAspect.resourceGroup.displayName")
      field "volumeID", jmes_path(col_item, "target.aspects.virtualDisksAspect.virtualDisks[0].uuid")
      field "volumeName", jmes_path(col_item, "target.aspects.virtualDisksAspect.virtualDisks[0].displayName")
      field "region", jmes_path(col_item, "target.aspects.virtualDisksAspect.virtualDisks[0].dataCenter.displayName")
      field "volumeType", jmes_path(col_item, "target.aspects.virtualDisksAspect.virtualDisks[0].tier")
      field "tags", jmes_path(col_item, "target.tags")
      field "createdTime", jmes_path(col_item, "createTime")
      field "attachmentState", jmes_path(col_item, "target.aspects.virtualDisksAspect.virtualDisks[0].attachmentState")
      field "daysUnattached", jmes_path(col_item, "target.aspects.virtualDisksAspect.virtualDisks[0].numDaysUnattached")
      field "sizeStats", jmes_path(col_item, "target.aspects.virtualDisksAspect.virtualDisks[0].stats")
      field "savings", jmes_path(col_item, "stats[0].value")
      field "savingsCurrency", jmes_path(col_item, "stats[0].units")
    end
  end
end


datasource "ds_filtered_turbonomics_recommendations" do
  run_script $js_filtered_turbonomics_recommendations, $ds_get_turbonomics_recommendations
end

###############################################################################
# Scripts
###############################################################################

script "js_get_turbonomics_recommendations", type: "javascript" do
  result "request"
  code <<-EOS
  //replace cookie every day this is run
    var request = {
      verb: "POST",
      host: "sales1.demo.turbonomic.com",
      path: "/api/v3/markets/Market/actions"
      body_fields: {
        "actionStateList": ["READY", "ACCEPTED", "QUEUED", "IN_PROGRESS"],
        "actionTypeList":["DELETE"],
        "relatedEntityTypes":["VirtualVolume"],
        "environmentType":"CLOUD",
        "detailLevel":"EXECUTION"
      },
      headers: {
        "Content-Type": "application/json"
        "Cookie": "JSESSIONID=node019whsjcv7387p7arsnad2rkzn1081.node0"
      }
    }
EOS
end

script "js_filtered_turbonomics_recommendations", type: "javascript" do
  result "result"
  parameters "ds_get_turbonomics_recommendations"
  code <<-EOS
    instances = []
    monthlySavings = 0.0
    function formatNumber(number, separator){
    var numString =number.toString()
    var values=numString.split(".")
    var result = ''
    while (values[0].length > 3){
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if (values[0].length > 0){
      result = values[0] + result
    }
    if(values[1]==undefined){
      return result
    }
    return result+"."+values[1]
    }

    _.each(ds_get_turbonomics_recommendations, function(volume){
      if (volume.attachmentState == "UNATTACHED" && volume.daysUnattached >= 0) {
        if (volume.savingsCurrency.indexOf("$") != -1) {
          volume.savingsCurrency = "$"
        }
        _.each(volume.sizeStats, function(stat){
          if (stat.name === "StorageAmount") {
            volume.size = stat.value + " " + stat.units
            return
          }
        })
        tags = []
        if (typeof volume.tags === "undefined" || volume.tags === null){
          volume.tags = tags
        }else{
          Object.keys(volume['tags']).forEach(function(key) {
            tags.push(key+'='+volume['tags'][key])
          });
        }
        volume.tags = tags
        savingsString = ""
        volume.savings = (Math.round(volume.savings * 730 * 1000) / 1000)
        monthlySavings = monthlySavings + volume.savings
        instances.push(volume)
      }
    })
    pretty_savings = ds_get_turbonomics_recommendations[0].savingsCurrency + ' ' + formatNumber(monthlySavings.toFixed(2), ",")
    message = "The total estimated monthly savings are " + pretty_savings + '.'
    result = {
      'instances': instances,
      'message': message
    }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_turbonomics_unused_volumes" do
  validate $ds_filtered_turbonomics_recommendations do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.instances }} Turbonomic Unattached Volumes found"
    detail_template <<-EOS
## Turbonomics Unattached Volumes POC
{{data.message}}
EOS
    check eq(size(val(data, "instances")), 0)
    export "instances" do
      field "accountID" do
        label "Account ID"
        path "accountID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "volumeID" do
        label "Volume ID"
      end
      field "volumeName" do
        label "Volume Name"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "savings" do
        label "Savings"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "region" do
        label "Region"
      end
      field "volumeType" do
        label "Volume Type"
      end
      field "tags" do
        label "Tags"
      end
      field "createdTime" do
        label "Created Time"
      end
      field "attachmentState" do
        label "Attachment State"
      end
      field "daysUnattached" do
        label "Days Unattached"
      end
      field "size" do
        label "Size"
      end
      field "id" do
        label "Account ID"
        path "accountID"
      end
    end
    escalate $esc_email
  end
end



###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################
