name "AWS Ensure Metric Filter/Alarm Exist For Unauthorized API Calls"
rs_pt_ver 20180301
type "policy"
short_description "Report if there is no log metric filter or alarm for unauthorized API calls. \n See the [README](https://github.com/flexera/policy_templates/tree/master/security/aws/log_metric_filter_alarm_api_calls) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "2.0",
  provider: "AWS",
  service: "CloudTrail",
  policy_set: "CIS",
  cce_id: "CCE-79186-3",
  cis_aws_foundations_securityhub: "3.1",
  benchmark_control: "4.1",
  benchmark_version: "1.4.0",
  cis_controls: "[\"8.11v8\", \"6.5v7\", \"6.7v7\"]",
  nist: "SI-4(5)"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email Address"
  description "Email addresses of the recipients you wish to notify"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_cloudwatch_alarms" do
  request do
    auth $auth_aws
    verb "GET"
    host "monitoring.us-east-1.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    header "Accept", "application/json"
    query "Action", "DescribeAlarms"
    query "Version", "2010-08-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeAlarmsResponse.DescribeAlarmsResult.MetricAlarms") do
      field "alarm_actions", jmes_path(col_item, "AlarmActions")
      field "alarm_arn", jmes_path(col_item, "AlarmArn")
      field "alarm_name", jmes_path(col_item, "AlarmName")
      field "actions_enabled", jmes_path(col_item, "ActionsEnabled")
      field "metric_name", jmes_path(col_item, "MetricName")
      field "namespace", jmes_path(col_item, "Namespace")
    end
  end
end

datasource "ds_trail_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "cloudtrail.us-east-1.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    header "Accept", "application/json"
    query "Action", "DescribeTrails"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeTrailsResponse.DescribeTrailsResult.trailList") do
      field "name", jmes_path(col_item, "Name")
      field "id", jmes_path(col_item, "TrailARN")
      field "region", jmes_path(col_item, "HomeRegion")
      field "log_group_arn", jmes_path(col_item, "CloudWatchLogsLogGroupArn")
      field "multiregion", jmes_path(col_item, "IsMultiRegionTrail")
    end
  end
end

datasource "ds_multiregion_trails" do
  run_script $js_multiregion_trails, $ds_trail_list
end

datasource "ds_multiregion_trails_with_logging" do
  iterate $ds_multiregion_trails
  request do
    auth $auth_aws
    verb "POST"
    host join(["cloudtrail.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    header "User-Agent", "RS Policies"
    header 'X-Amz-Target', 'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetTrailStatus'
    header 'Content-Type', 'application/x-amz-json-1.1'
    body join(['{ "Name": "', val(iter_item, "id"), '" }'])
  end
  result do
    encoding "json"
    field "name", val(iter_item, "name")
    field "id", val(iter_item, "id")
    field "region", val(iter_item, "region")
    field "log_group", val(iter_item, "log_group")
    field "log_group_arn", val(iter_item, "log_group_arn")
    field "is_logging", jmes_path(response, "IsLogging")
  end
end

datasource "ds_multiregion_trails_with_selectors" do
  iterate $ds_multiregion_trails_with_logging
  request do
    auth $auth_aws
    verb "POST"
    host join(["cloudtrail.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    header "User-Agent", "RS Policies"
    header 'X-Amz-Target', 'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetEventSelectors'
    header 'Content-Type', 'application/x-amz-json-1.1'
    body join(['{ "TrailName": "', val(iter_item, "name"), '" }'])
  end
  result do
    encoding "json"
    field "name", val(iter_item, "name")
    field "id", val(iter_item, "id")
    field "region", val(iter_item, "region")
    field "log_group", val(iter_item, "log_group")
    field "log_group_arn", val(iter_item, "log_group_arn")
    field "is_logging", val(iter_item, "is_logging")
    field "event_selectors", jmes_path(response, "EventSelectors")
  end
end

datasource "ds_multiregion_trails_with_filters" do
  iterate $ds_multiregion_trails_with_selectors
  request do
    auth $auth_aws
    verb "POST"
    host join(["logs.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    header "User-Agent", "RS Policies"
    header 'X-Amz-Target', 'Logs_20140328.DescribeMetricFilters'
    header 'Content-Type', 'application/x-amz-json-1.1'
    body join(['{ "logGroupName": "', val(iter_item, "log_group"), '" }'])
    ignore_status 400
  end
  result do
    encoding "json"
    field "name", val(iter_item, "name")
    field "id", val(iter_item, "id")
    field "region", val(iter_item, "region")
    field "log_group", val(iter_item, "log_group")
    field "log_group_arn", val(iter_item, "log_group_arn")
    field "is_logging", val(iter_item, "is_logging")
    field "event_selectors", val(iter_item, "event_selectors")
    field "filters", jmes_path(response, "metricFilters")
  end
end

datasource "ds_combined_trails" do
  run_script $js_combined_trails, $ds_multiregion_trails_with_selectors, $ds_multiregion_trails_with_filters, $ds_cloudwatch_alarms
end

datasource "ds_sns_topics" do
  run_script $js_sns_topics, $ds_combined_trails
end

datasource "ds_sns_subscriptions" do
  iterate $ds_sns_topics
  request do
    auth $auth_aws
    verb "GET"
    host join(["sns.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    header "User-Agent", "RS Policies"
    header "Accept", "application/json"
    query "Action", "ListSubscriptionsByTopic"
    query "Version", "2010-03-31"
    query "TopicArn", val(iter_item, "action")
  end
  result do
    encoding "json"
    field "sns_topic", val(iter_item, "action")
    field "sns_region", val(iter_item, "region")
    field "subscriptions", jmes_path(response, "ListSubscriptionsByTopicResponse.ListSubscriptionsByTopicResult.Subscriptions")
  end
end

datasource "ds_combined_trails_with_subs" do
  run_script $js_combined_trails_with_subs, $ds_combined_trails, $ds_sns_subscriptions
end

datasource "ds_results" do
  run_script $js_results, $ds_combined_trails_with_subs
end

###############################################################################
# Scripts
###############################################################################

script "js_multiregion_trails", type:"javascript" do
  parameters "ds_trail_list"
  result "result"
  code <<-EOS
    result = []

    _.each(ds_trail_list, function(trail) {
      if (trail.multiregion == true) {
        log_group = ""

        if (trail.log_group_arn != null) {
          log_group = trail.log_group_arn.split(':')[6]
        }

        result.push({
          name: trail.name,
          id: trail.id,
          region: trail.region,
          log_group_arn: trail.log_group_arn,
          log_group: log_group
        })
      }
    })
EOS
end

script "js_combined_trails", type:"javascript" do
  parameters "ds_multiregion_trails_with_selectors", "ds_multiregion_trails_with_filters", "ds_cloudwatch_alarms"
  result "final_result"
  code <<-EOS
    first_result = []
    final_result = []
    filter_arns = []

    _.each(ds_multiregion_trails_with_filters, function(trail) {
      filter_arns.push(trail.id)
      first_result.push(trail)
    })

    _.each(ds_multiregion_trails_with_selectors, function(trail) {
      if (_.contains(filter_arns, trail.id) == false) {
        trail.filters = []
        first_result.push(trail)
      }
    })

    _.each(first_result, function(trail) {
      _.each(trail.filters, function(filter) {
        filterPatternCleaned = filter.filterPattern.replace(/'/g, '"').replace(/\s/g, "").replace(/{/g, "").replace(/}/g, "")
        filter.filterPatternParts = filterPatternCleaned.split('&&').sort()

        _.each(filter.metricTransformations, function(transformation) {
          _.each(ds_cloudwatch_alarms, function(alarm) {
            if (alarm.metric_name == transformation.metricName) {
              transformation.alarm_actions = alarm.alarm_actions
              transformation.alarm_arn = alarm.alarm_arn
              transformation.alarm_name = alarm.alarm_name
            }
          })
        })
      })

      final_result.push(trail)
    })
EOS
end

script "js_sns_topics", type:"javascript" do
  parameters "ds_combined_trails"
  result "result"
  code <<-EOS
    result = []

    _.each(ds_combined_trails, function(trail) {
      _.each(trail.filters, function(filter) {
        _.each(filter.metricTransformations, function(transformation) {
          if (transformation.alarm_actions != undefined) {
            _.each(transformation.alarm_actions, function(action) {
              if (action.split(":")[2] == "sns") {
                result.push({
                  region: trail.region,
                  action: action
                })
              }
            })
          }
        })
      })
    })
EOS
end

script "js_combined_trails_with_subs", type:"javascript" do
  parameters "ds_combined_trails", "ds_sns_subscriptions"
  result "result"
  code <<-EOS
    starting_list = ds_combined_trails
    result = []

    _.each(starting_list, function(trail, trail_index) {
      _.each(trail.filters, function(filter, filter_index) {
        _.each(filter.metricTransformations, function(transformation, transformation_index) {
          _.each(transformation.alarm_actions, function(action, action_index) {
            _.each(ds_sns_subscriptions, function(sns_subscription) {
              _.each(sns_subscription.subscriptions, function(subscription) {
                if (action == subscription.TopicArn) {
                  trail.filters[filter_index].metricTransformations[transformation_index].alarm_actions[action_index] = subscription
                }
              })
            })
          })
        })
      })

      result.push(trail)
    })
EOS
end

# Things to check for:
# Multiregion CloudTrail
# IsLogging set to True (CloudTrail is active)
# Ensure there is at least one Event Selector for a Trail with IncludeManagementEvents set to
#   true and ReadWriteType set to All (Capturing Management Events)
# Verify valid MetricFilter exists
# Ensure there is at least one active subscriber to the SNS topic (valid ARN present)

script "js_results", type:"javascript" do
  parameters "ds_combined_trails_with_subs"
  result "result"
  code <<-EOS
    result = []

    _.each(ds_combined_trails_with_subs, function(trail) {
      test_eventselector = false
      test_goodfilter = false

      if (trail.event_selectors != null) {
        _.each(trail.event_selectors, function(selector) {
          if (selector.IncludeManagementEvents == true && selector.ReadWriteType == "All") {
            test_eventselector = true
          }
        })
      }

      _.each(trail.filters, function(filter) {
        test_metricfilter = false

        if (_.contains(filter.filterPatternParts, '($.eventName!="HeadBucket"))') &&
            _.contains(filter.filterPatternParts, '(($.errorCode="*UnauthorizedOperation")||($.errorCode="AccessDenied*"))') &&
            _.contains(filter.filterPatternParts, '(($.sourceIPAddress!="delivery.logs.amazonaws.com")'))
        {
          test_metricfilter = true
        }

        _.each(filter.metricTransformations, function(transformation) {
          _.each(transformation.alarm_actions, function(alarm) {
            if (alarm.SubscriptionArn.substring(0,12) == 'arn:aws:sns:' && test_metricfilter == true) {
              test_goodfilter = true
            }
          })
        })
      })

      if (trail.is_logging || test_eventselector || test_goodfilter) {
        trail.test_eventselector = test_eventselector
        trail.test_goodfilter = test_goodfilter
        trail.test_metricfilter = test_metricfilter
        result.push(trail)
      }
    })

EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_trails_without_ol" do
  validate $ds_results do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} CloudTrails Found Without Complete Object Logging"
    escalate $esc_report_results
    check ne(size(data),0)
    detail_template  <<-EOS
      No CloudTrail exists that is properly configured to raise an alarm for unauthorized API calls.

      A properly configured CloudTrail for this purpose would meet the following criteria:
      * Configured for multiregion.
      * Has logging enabled.
      * Has an Event Selector configured to log all Management events.
      * Has an appropriate filter configured to capture these events and raise an alarm.

      For more details on how to remediate this issue, please review Amazon's documentation on this here:
      https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.1
    EOS
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_report_results" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end
