name "Example Child Meta Policy (AWS Bucket Tracker)"
rs_pt_ver 20180301
type "policy"
short_description "Updated version of a policy which tracks AWS bucket info"
long_description "Applied Bucket Tracker updated to delete itself if applied as a meta child policy and the meta parent policy has terminated"
severity "low"
category "Meta Policy Testing"
tenancy "single"
default_frequency "15 minutes"
info(
  version: "1.0",
)

parameter "param_email" do
  label "Email Addresses"
  type "list"
  description "List of email addresses to send escalation emails to. Should be an empty array or use a default of empty array when being applied from a meta_parent_policy"
  default []
end

parameter "param_aws_account_number" do
  label "AWS Account Number"
  type "string"
  description "AWS Account where the policy will be run instead of the account associated with the credential"
  default ""
end

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "aws"
  tags "provider=aws"
  description "Authentication for running the policy."
  aws_account_number $param_aws_account_number
end

# ^^^^^ From the default policy ^^^^^

# vvvvv Added for the self-terminating policy vvvvv

auth "auth_rs", type: "rightscale"

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_rs
    host rs_governance_host
    scheme 'http'
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end


datasource "ds_decide_if_self_terminate" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_rs',
    host: rs_governance_host,
    scheme: 'http',
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_decide_if_self_terminate, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

# ^^^^^ Added for the self-terminating policy ^^^^^

# vvvvv From the default policy vvvvv

datasource "ds_aws_buckets" do
  request do
    auth $auth_aws
    host "s3.amazonaws.com"
    # passing any value so the deletion happens before the farthest leaf of the tree in case there is an issue here like a credential failure which would stop evaluation of the polich
    path val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListAllMyBucketsResult/Buckets/Bucket", "array") do
      field "bucket_name", xpath(col_item,"Name")
      field "creation_date", xpath(col_item, "CreationDate")
    end
  end
end

policy "policy_s3_bucket_list" do
  validate $ds_aws_buckets do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} List of S3 Buckets Found in AWS"
    escalate $report_s3_buckets_list
    # vvvvv Edited for the self-terminating policy vvvvv
    # check used to be eq(size(data),0)
    # logic is we should only create an incident of we don't terminate the policy
    # ds_decide_if_self_terminate only factors into the logic if true, so if the parent meta policy exists or the applied policy doesn't have one, this evaluates as normal
    # in the case of a policy with multiple checks, each check must have this logic as each check is evaluated seperately
    check logic_or($ds_decide_if_self_terminate, eq(size(data),0))
    # ^^^^^ Edited for the self-terminating policy ^^^^^
    export do
      resource_level true
      field "id" do
        path "bucket_name"
        label "Bucket Name"
      end
      field "creation_date" do
        label "Creation Date"
      end
    end
  end
end

escalation "report_s3_buckets_list" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end
